/* Generated by Cython 0.29.32 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/project/fun/zuspec/zuspec-fe-parser/packages/python/lib/python3.7/site-packages/ciostream/ciostream_native.h"
        ],
        "include_dirs": [
            "/project/fun/zuspec/zuspec-fe-parser/packages/python/lib/python3.7/site-packages/ciostream",
            "/project/fun/zuspec/zuspec-fe-parser/packages/zuspec-parser/src/include",
            "/project/fun/zuspec/zuspec-fe-parser/packages/zuspec-parser/build",
            "/project/fun/zuspec/zuspec-fe-parser/packages/zuspec-parser/build/pssast/ext",
            "/project/fun/zuspec/zuspec-fe-parser/packages/zuspec-parser/build/pssast/src/include"
        ],
        "language": "c++",
        "name": "pssparser.core",
        "sources": [
            "/project/fun/zuspec/zuspec-fe-parser/packages/zuspec-parser/python/core.pyx"
        ]
    },
    "module_name": "pssparser.core"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pssparser__core
#define __PYX_HAVE_API__pssparser__core
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <string.h>
#include <string>
#include <vector>
#include <memory>
#include <stdint.h>
#include <stdio.h>
#include <map>
#include "pssp/ast/ExprBinOp.h"
#include "pssp/ast/ExprUnaryOp.h"
#include "pssp/ast/TypeCategory.h"
#include "pssp/ast/IFactory.h"
#include "pssp/ast/IExecStmt.h"
#include "pssp/ast/IExpr.h"
#include "pssp/ast/IRefExpr.h"
#include "pssp/ast/ITemplateParamDeclList.h"
#include "pssp/ast/ITemplateParamDecl.h"
#include "pssp/ast/IScopeChild.h"
#include "pssp/ast/ITemplateParamValueList.h"
#include "pssp/ast/ITemplateParamValue.h"
#include "pssp/ast/ITemplateParamTypeValue.h"
#include "pssp/ast/ITemplateParamExprValue.h"
#include "pssp/ast/IConstraintStmt.h"
#include "pssp/ast/IScope.h"
#include "pssp/ast/INamedScopeChild.h"
#include "pssp/ast/IPackageImportStmt.h"
#include "pssp/ast/IDataType.h"
#include "pssp/ast/IExecScope.h"
#include "pssp/ast/IProceduralStmtDataDeclaration.h"
#include "pssp/ast/IExprBin.h"
#include "pssp/ast/IExprBitSlice.h"
#include "pssp/ast/IExprBool.h"
#include "pssp/ast/IExprCast.h"
#include "pssp/ast/IExprCompileHas.h"
#include "pssp/ast/IExprCond.h"
#include "pssp/ast/IExprDomainOpenRangeList.h"
#include "pssp/ast/IExprDomainOpenRangeValue.h"
#include "pssp/ast/IExprHierarchicalId.h"
#include "pssp/ast/IExprId.h"
#include "pssp/ast/IExprIn.h"
#include "pssp/ast/IExprMemberPathElem.h"
#include "pssp/ast/IExprNumber.h"
#include "pssp/ast/IExprAggregateLiteral.h"
#include "pssp/ast/IExprOpenRangeList.h"
#include "pssp/ast/IExprOpenRangeValue.h"
#include "pssp/ast/IExprRefPath.h"
#include "pssp/ast/IExprRefPathElem.h"
#include "pssp/ast/IExprRefPathStaticRooted.h"
#include "pssp/ast/IExprStaticRefPath.h"
#include "pssp/ast/IExprString.h"
#include "pssp/ast/IExprSubscript.h"
#include "pssp/ast/IExprUnary.h"
#include "pssp/ast/IMethodParameterList.h"
#include "pssp/ast/ITypeIdentifier.h"
#include "pssp/ast/ITypeIdentifierElem.h"
#include "pssp/ast/IRefExprTypeScopeGlobal.h"
#include "pssp/ast/IRefExprTypeScopeContext.h"
#include "pssp/ast/IRefExprScopeIndex.h"
#include "pssp/ast/ITemplateGenericTypeParamDecl.h"
#include "pssp/ast/ITemplateCategoryTypeParamDecl.h"
#include "pssp/ast/ITemplateValueParamDecl.h"
#include "pssp/ast/IConstraintBlock.h"
#include "pssp/ast/IConstraintScope.h"
#include "pssp/ast/IConstraintStmtDefault.h"
#include "pssp/ast/IConstraintStmtDefaultDisable.h"
#include "pssp/ast/IConstraintStmtExpr.h"
#include "pssp/ast/IConstraintStmtField.h"
#include "pssp/ast/IConstraintStmtIf.h"
#include "pssp/ast/IConstraintStmtUnique.h"
#include "pssp/ast/IGlobalScope.h"
#include "pssp/ast/INamedScope.h"
#include "pssp/ast/IPackageScope.h"
#include "pssp/ast/IDataTypeArray.h"
#include "pssp/ast/IDataTypeBool.h"
#include "pssp/ast/IDataTypeChandle.h"
#include "pssp/ast/IDataTypeEnum.h"
#include "pssp/ast/IDataTypeInt.h"
#include "pssp/ast/IDataTypeString.h"
#include "pssp/ast/IDataTypeUserDefined.h"
#include "pssp/ast/IExprRefPathContext.h"
#include "pssp/ast/IExprRefPathStatic.h"
#include "pssp/ast/IExprSignedNumber.h"
#include "pssp/ast/IExprUnsignedNumber.h"
#include "pssp/ast/IConstraintStmtForall.h"
#include "pssp/ast/IConstraintStmtForeach.h"
#include "pssp/ast/IConstraintStmtImplication.h"
#include "pssp/ast/ITypeScope.h"
#include "pssp/ast/IExprRefPathStaticFunc.h"
#include "pssp/ast/IExprRefPathSuper.h"
#include "pssp/ast/IAction.h"
#include "pssp/ast/IComponent.h"
#include "pssp/ast/IStruct.h"
#include "pssp/ast/IState.h"
#include "pssp/ast/IStream.h"
#include "pssp/ast/IBuffer.h"
#include "pssp/ast/IResource.h"
#include "pssp/ast/impl/VisitorBase.h"
#include "PyBaseVisitor.h"
#include <iostream>
#include "ciostream_native.h"
#include "pssp/IFactory.h"
#include "pssp/IAstBuilder.h"
#include "pssp/IMarker.h"
#include "pssp/IMarkerListener.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "python/core.pyx",
  "stringsource",
  "python/pssparser/core.pxd",
  "type.pxd",
  "__init__.pxd",
  "python/pssparser/pssast.pxd",
};

/* "pssast_decl.pxd":13
 * cimport cpython.ref as cpy_ref
 * 
 * ctypedef char                 int8_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t
 */
typedef char __pyx_t_9pssparser_11pssast_decl_int8_t;

/* "pssast_decl.pxd":14
 * 
 * ctypedef char                 int8_t
 * ctypedef unsigned char        uint8_t             # <<<<<<<<<<<<<<
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t
 */
typedef unsigned char __pyx_t_9pssparser_11pssast_decl_uint8_t;

/* "pssast_decl.pxd":15
 * ctypedef char                 int8_t
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t
 */
typedef short __pyx_t_9pssparser_11pssast_decl_int16_t;

/* "pssast_decl.pxd":16
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t             # <<<<<<<<<<<<<<
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t
 */
typedef unsigned short __pyx_t_9pssparser_11pssast_decl_uint16_t;

/* "pssast_decl.pxd":17
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t
 */
typedef int __pyx_t_9pssparser_11pssast_decl_int32_t;

/* "pssast_decl.pxd":18
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t             # <<<<<<<<<<<<<<
 * ctypedef long long            int64_t
 * ctypedef unsigned long long   uint64_t
 */
typedef unsigned int __pyx_t_9pssparser_11pssast_decl_uint32_t;

/* "pssast_decl.pxd":19
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long   uint64_t
 * 
 */
typedef PY_LONG_LONG __pyx_t_9pssparser_11pssast_decl_int64_t;

/* "pssast_decl.pxd":20
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t
 * ctypedef unsigned long long   uint64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef IExecStmt *IExecStmtP
 */
typedef unsigned PY_LONG_LONG __pyx_t_9pssparser_11pssast_decl_uint64_t;

/* "pssparser/pssast.pxd":13
 * cimport cpython.ref as cpy_ref
 * 
 * ctypedef char                 int8_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t
 */
typedef char __pyx_t_9pssparser_6pssast_int8_t;

/* "pssparser/pssast.pxd":14
 * 
 * ctypedef char                 int8_t
 * ctypedef unsigned char        uint8_t             # <<<<<<<<<<<<<<
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t
 */
typedef unsigned char __pyx_t_9pssparser_6pssast_uint8_t;

/* "pssparser/pssast.pxd":15
 * ctypedef char                 int8_t
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t
 */
typedef short __pyx_t_9pssparser_6pssast_int16_t;

/* "pssparser/pssast.pxd":16
 * ctypedef unsigned char        uint8_t
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t             # <<<<<<<<<<<<<<
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t
 */
typedef unsigned short __pyx_t_9pssparser_6pssast_uint16_t;

/* "pssparser/pssast.pxd":17
 * ctypedef short                int16_t
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t
 */
typedef int __pyx_t_9pssparser_6pssast_int32_t;

/* "pssparser/pssast.pxd":18
 * ctypedef unsigned short       uint16_t
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t             # <<<<<<<<<<<<<<
 * ctypedef long long            int64_t
 * ctypedef unsigned long long   uint64_t
 */
typedef unsigned int __pyx_t_9pssparser_6pssast_uint32_t;

/* "pssparser/pssast.pxd":19
 * ctypedef int                  int32_t
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long   uint64_t
 * 
 */
typedef PY_LONG_LONG __pyx_t_9pssparser_6pssast_int64_t;

/* "pssparser/pssast.pxd":20
 * ctypedef unsigned int         uint32_t
 * ctypedef long long            int64_t
 * ctypedef unsigned long long   uint64_t             # <<<<<<<<<<<<<<
 * 
 * from pssparser cimport pssast_decl
 */
typedef unsigned PY_LONG_LONG __pyx_t_9pssparser_6pssast_uint64_t;

/*--- Type declarations ---*/
struct __pyx_obj_9ciostream_cistream;
struct __pyx_obj_9ciostream_costream;
struct __pyx_obj_9pssparser_6pssast_Factory;
struct __pyx_obj_9pssparser_6pssast_ExecStmt;
struct __pyx_obj_9pssparser_6pssast_Expr;
struct __pyx_obj_9pssparser_6pssast_RefExpr;
struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList;
struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl;
struct __pyx_obj_9pssparser_6pssast_ScopeChild;
struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList;
struct __pyx_obj_9pssparser_6pssast_TemplateParamValue;
struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue;
struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmt;
struct __pyx_obj_9pssparser_6pssast_Scope;
struct __pyx_obj_9pssparser_6pssast_NamedScopeChild;
struct __pyx_obj_9pssparser_6pssast_PackageImportStmt;
struct __pyx_obj_9pssparser_6pssast_DataType;
struct __pyx_obj_9pssparser_6pssast_ExecScope;
struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration;
struct __pyx_obj_9pssparser_6pssast_ExprBin;
struct __pyx_obj_9pssparser_6pssast_ExprBitSlice;
struct __pyx_obj_9pssparser_6pssast_ExprBool;
struct __pyx_obj_9pssparser_6pssast_ExprCast;
struct __pyx_obj_9pssparser_6pssast_ExprCompileHas;
struct __pyx_obj_9pssparser_6pssast_ExprCond;
struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList;
struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue;
struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId;
struct __pyx_obj_9pssparser_6pssast_ExprId;
struct __pyx_obj_9pssparser_6pssast_ExprIn;
struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem;
struct __pyx_obj_9pssparser_6pssast_ExprNumber;
struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral;
struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList;
struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue;
struct __pyx_obj_9pssparser_6pssast_ExprRefPath;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted;
struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath;
struct __pyx_obj_9pssparser_6pssast_ExprString;
struct __pyx_obj_9pssparser_6pssast_ExprSubscript;
struct __pyx_obj_9pssparser_6pssast_ExprUnary;
struct __pyx_obj_9pssparser_6pssast_MethodParameterList;
struct __pyx_obj_9pssparser_6pssast_TypeIdentifier;
struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem;
struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal;
struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext;
struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex;
struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl;
struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl;
struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl;
struct __pyx_obj_9pssparser_6pssast_ConstraintBlock;
struct __pyx_obj_9pssparser_6pssast_ConstraintScope;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique;
struct __pyx_obj_9pssparser_6pssast_GlobalScope;
struct __pyx_obj_9pssparser_6pssast_NamedScope;
struct __pyx_obj_9pssparser_6pssast_PackageScope;
struct __pyx_obj_9pssparser_6pssast_DataTypeArray;
struct __pyx_obj_9pssparser_6pssast_DataTypeBool;
struct __pyx_obj_9pssparser_6pssast_DataTypeChandle;
struct __pyx_obj_9pssparser_6pssast_DataTypeEnum;
struct __pyx_obj_9pssparser_6pssast_DataTypeInt;
struct __pyx_obj_9pssparser_6pssast_DataTypeString;
struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic;
struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber;
struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach;
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication;
struct __pyx_obj_9pssparser_6pssast_TypeScope;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc;
struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper;
struct __pyx_obj_9pssparser_6pssast_Action;
struct __pyx_obj_9pssparser_6pssast_Component;
struct __pyx_obj_9pssparser_6pssast_Struct;
struct __pyx_obj_9pssparser_6pssast_State;
struct __pyx_obj_9pssparser_6pssast_Stream;
struct __pyx_obj_9pssparser_6pssast_Buffer;
struct __pyx_obj_9pssparser_6pssast_Resource;
struct __pyx_obj_9pssparser_6pssast_VisitorBase;
struct __pyx_obj_9pssparser_4core_Factory;
struct __pyx_obj_9pssparser_4core_AstBuilder;
struct __pyx_obj_9pssparser_4core_MarkerListener;

/* "pssast_decl.pxd":22
 * ctypedef unsigned long long   uint64_t
 * 
 * ctypedef IExecStmt *IExecStmtP             # <<<<<<<<<<<<<<
 * ctypedef IExpr *IExprP
 * ctypedef IRefExpr *IRefExprP
 */
typedef pssp::ast::IExecStmt *__pyx_t_9pssparser_11pssast_decl_IExecStmtP;

/* "pssast_decl.pxd":23
 * 
 * ctypedef IExecStmt *IExecStmtP
 * ctypedef IExpr *IExprP             # <<<<<<<<<<<<<<
 * ctypedef IRefExpr *IRefExprP
 * ctypedef ITemplateParamDeclList *ITemplateParamDeclListP
 */
typedef pssp::ast::IExpr *__pyx_t_9pssparser_11pssast_decl_IExprP;

/* "pssast_decl.pxd":24
 * ctypedef IExecStmt *IExecStmtP
 * ctypedef IExpr *IExprP
 * ctypedef IRefExpr *IRefExprP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamDeclList *ITemplateParamDeclListP
 * ctypedef ITemplateParamDecl *ITemplateParamDeclP
 */
typedef pssp::ast::IRefExpr *__pyx_t_9pssparser_11pssast_decl_IRefExprP;

/* "pssast_decl.pxd":25
 * ctypedef IExpr *IExprP
 * ctypedef IRefExpr *IRefExprP
 * ctypedef ITemplateParamDeclList *ITemplateParamDeclListP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamDecl *ITemplateParamDeclP
 * ctypedef IScopeChild *IScopeChildP
 */
typedef pssp::ast::ITemplateParamDeclList *__pyx_t_9pssparser_11pssast_decl_ITemplateParamDeclListP;

/* "pssast_decl.pxd":26
 * ctypedef IRefExpr *IRefExprP
 * ctypedef ITemplateParamDeclList *ITemplateParamDeclListP
 * ctypedef ITemplateParamDecl *ITemplateParamDeclP             # <<<<<<<<<<<<<<
 * ctypedef IScopeChild *IScopeChildP
 * ctypedef ITemplateParamValueList *ITemplateParamValueListP
 */
typedef pssp::ast::ITemplateParamDecl *__pyx_t_9pssparser_11pssast_decl_ITemplateParamDeclP;

/* "pssast_decl.pxd":27
 * ctypedef ITemplateParamDeclList *ITemplateParamDeclListP
 * ctypedef ITemplateParamDecl *ITemplateParamDeclP
 * ctypedef IScopeChild *IScopeChildP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamValueList *ITemplateParamValueListP
 * ctypedef ITemplateParamValue *ITemplateParamValueP
 */
typedef pssp::ast::IScopeChild *__pyx_t_9pssparser_11pssast_decl_IScopeChildP;

/* "pssast_decl.pxd":28
 * ctypedef ITemplateParamDecl *ITemplateParamDeclP
 * ctypedef IScopeChild *IScopeChildP
 * ctypedef ITemplateParamValueList *ITemplateParamValueListP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamValue *ITemplateParamValueP
 * ctypedef ITemplateParamTypeValue *ITemplateParamTypeValueP
 */
typedef pssp::ast::ITemplateParamValueList *__pyx_t_9pssparser_11pssast_decl_ITemplateParamValueListP;

/* "pssast_decl.pxd":29
 * ctypedef IScopeChild *IScopeChildP
 * ctypedef ITemplateParamValueList *ITemplateParamValueListP
 * ctypedef ITemplateParamValue *ITemplateParamValueP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamTypeValue *ITemplateParamTypeValueP
 * ctypedef ITemplateParamExprValue *ITemplateParamExprValueP
 */
typedef pssp::ast::ITemplateParamValue *__pyx_t_9pssparser_11pssast_decl_ITemplateParamValueP;

/* "pssast_decl.pxd":30
 * ctypedef ITemplateParamValueList *ITemplateParamValueListP
 * ctypedef ITemplateParamValue *ITemplateParamValueP
 * ctypedef ITemplateParamTypeValue *ITemplateParamTypeValueP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateParamExprValue *ITemplateParamExprValueP
 * ctypedef IConstraintStmt *IConstraintStmtP
 */
typedef pssp::ast::ITemplateParamTypeValue *__pyx_t_9pssparser_11pssast_decl_ITemplateParamTypeValueP;

/* "pssast_decl.pxd":31
 * ctypedef ITemplateParamValue *ITemplateParamValueP
 * ctypedef ITemplateParamTypeValue *ITemplateParamTypeValueP
 * ctypedef ITemplateParamExprValue *ITemplateParamExprValueP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmt *IConstraintStmtP
 * ctypedef IScope *IScopeP
 */
typedef pssp::ast::ITemplateParamExprValue *__pyx_t_9pssparser_11pssast_decl_ITemplateParamExprValueP;

/* "pssast_decl.pxd":32
 * ctypedef ITemplateParamTypeValue *ITemplateParamTypeValueP
 * ctypedef ITemplateParamExprValue *ITemplateParamExprValueP
 * ctypedef IConstraintStmt *IConstraintStmtP             # <<<<<<<<<<<<<<
 * ctypedef IScope *IScopeP
 * ctypedef INamedScopeChild *INamedScopeChildP
 */
typedef pssp::ast::IConstraintStmt *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtP;

/* "pssast_decl.pxd":33
 * ctypedef ITemplateParamExprValue *ITemplateParamExprValueP
 * ctypedef IConstraintStmt *IConstraintStmtP
 * ctypedef IScope *IScopeP             # <<<<<<<<<<<<<<
 * ctypedef INamedScopeChild *INamedScopeChildP
 * ctypedef IPackageImportStmt *IPackageImportStmtP
 */
typedef pssp::ast::IScope *__pyx_t_9pssparser_11pssast_decl_IScopeP;

/* "pssast_decl.pxd":34
 * ctypedef IConstraintStmt *IConstraintStmtP
 * ctypedef IScope *IScopeP
 * ctypedef INamedScopeChild *INamedScopeChildP             # <<<<<<<<<<<<<<
 * ctypedef IPackageImportStmt *IPackageImportStmtP
 * ctypedef IDataType *IDataTypeP
 */
typedef pssp::ast::INamedScopeChild *__pyx_t_9pssparser_11pssast_decl_INamedScopeChildP;

/* "pssast_decl.pxd":35
 * ctypedef IScope *IScopeP
 * ctypedef INamedScopeChild *INamedScopeChildP
 * ctypedef IPackageImportStmt *IPackageImportStmtP             # <<<<<<<<<<<<<<
 * ctypedef IDataType *IDataTypeP
 * ctypedef IExecScope *IExecScopeP
 */
typedef pssp::ast::IPackageImportStmt *__pyx_t_9pssparser_11pssast_decl_IPackageImportStmtP;

/* "pssast_decl.pxd":36
 * ctypedef INamedScopeChild *INamedScopeChildP
 * ctypedef IPackageImportStmt *IPackageImportStmtP
 * ctypedef IDataType *IDataTypeP             # <<<<<<<<<<<<<<
 * ctypedef IExecScope *IExecScopeP
 * ctypedef IProceduralStmtDataDeclaration *IProceduralStmtDataDeclarationP
 */
typedef pssp::ast::IDataType *__pyx_t_9pssparser_11pssast_decl_IDataTypeP;

/* "pssast_decl.pxd":37
 * ctypedef IPackageImportStmt *IPackageImportStmtP
 * ctypedef IDataType *IDataTypeP
 * ctypedef IExecScope *IExecScopeP             # <<<<<<<<<<<<<<
 * ctypedef IProceduralStmtDataDeclaration *IProceduralStmtDataDeclarationP
 * ctypedef IExprBin *IExprBinP
 */
typedef pssp::ast::IExecScope *__pyx_t_9pssparser_11pssast_decl_IExecScopeP;

/* "pssast_decl.pxd":38
 * ctypedef IDataType *IDataTypeP
 * ctypedef IExecScope *IExecScopeP
 * ctypedef IProceduralStmtDataDeclaration *IProceduralStmtDataDeclarationP             # <<<<<<<<<<<<<<
 * ctypedef IExprBin *IExprBinP
 * ctypedef IExprBitSlice *IExprBitSliceP
 */
typedef pssp::ast::IProceduralStmtDataDeclaration *__pyx_t_9pssparser_11pssast_decl_IProceduralStmtDataDeclarationP;

/* "pssast_decl.pxd":39
 * ctypedef IExecScope *IExecScopeP
 * ctypedef IProceduralStmtDataDeclaration *IProceduralStmtDataDeclarationP
 * ctypedef IExprBin *IExprBinP             # <<<<<<<<<<<<<<
 * ctypedef IExprBitSlice *IExprBitSliceP
 * ctypedef IExprBool *IExprBoolP
 */
typedef pssp::ast::IExprBin *__pyx_t_9pssparser_11pssast_decl_IExprBinP;

/* "pssast_decl.pxd":40
 * ctypedef IProceduralStmtDataDeclaration *IProceduralStmtDataDeclarationP
 * ctypedef IExprBin *IExprBinP
 * ctypedef IExprBitSlice *IExprBitSliceP             # <<<<<<<<<<<<<<
 * ctypedef IExprBool *IExprBoolP
 * ctypedef IExprCast *IExprCastP
 */
typedef pssp::ast::IExprBitSlice *__pyx_t_9pssparser_11pssast_decl_IExprBitSliceP;

/* "pssast_decl.pxd":41
 * ctypedef IExprBin *IExprBinP
 * ctypedef IExprBitSlice *IExprBitSliceP
 * ctypedef IExprBool *IExprBoolP             # <<<<<<<<<<<<<<
 * ctypedef IExprCast *IExprCastP
 * ctypedef IExprCompileHas *IExprCompileHasP
 */
typedef pssp::ast::IExprBool *__pyx_t_9pssparser_11pssast_decl_IExprBoolP;

/* "pssast_decl.pxd":42
 * ctypedef IExprBitSlice *IExprBitSliceP
 * ctypedef IExprBool *IExprBoolP
 * ctypedef IExprCast *IExprCastP             # <<<<<<<<<<<<<<
 * ctypedef IExprCompileHas *IExprCompileHasP
 * ctypedef IExprCond *IExprCondP
 */
typedef pssp::ast::IExprCast *__pyx_t_9pssparser_11pssast_decl_IExprCastP;

/* "pssast_decl.pxd":43
 * ctypedef IExprBool *IExprBoolP
 * ctypedef IExprCast *IExprCastP
 * ctypedef IExprCompileHas *IExprCompileHasP             # <<<<<<<<<<<<<<
 * ctypedef IExprCond *IExprCondP
 * ctypedef IExprDomainOpenRangeList *IExprDomainOpenRangeListP
 */
typedef pssp::ast::IExprCompileHas *__pyx_t_9pssparser_11pssast_decl_IExprCompileHasP;

/* "pssast_decl.pxd":44
 * ctypedef IExprCast *IExprCastP
 * ctypedef IExprCompileHas *IExprCompileHasP
 * ctypedef IExprCond *IExprCondP             # <<<<<<<<<<<<<<
 * ctypedef IExprDomainOpenRangeList *IExprDomainOpenRangeListP
 * ctypedef IExprDomainOpenRangeValue *IExprDomainOpenRangeValueP
 */
typedef pssp::ast::IExprCond *__pyx_t_9pssparser_11pssast_decl_IExprCondP;

/* "pssast_decl.pxd":45
 * ctypedef IExprCompileHas *IExprCompileHasP
 * ctypedef IExprCond *IExprCondP
 * ctypedef IExprDomainOpenRangeList *IExprDomainOpenRangeListP             # <<<<<<<<<<<<<<
 * ctypedef IExprDomainOpenRangeValue *IExprDomainOpenRangeValueP
 * ctypedef IExprHierarchicalId *IExprHierarchicalIdP
 */
typedef pssp::ast::IExprDomainOpenRangeList *__pyx_t_9pssparser_11pssast_decl_IExprDomainOpenRangeListP;

/* "pssast_decl.pxd":46
 * ctypedef IExprCond *IExprCondP
 * ctypedef IExprDomainOpenRangeList *IExprDomainOpenRangeListP
 * ctypedef IExprDomainOpenRangeValue *IExprDomainOpenRangeValueP             # <<<<<<<<<<<<<<
 * ctypedef IExprHierarchicalId *IExprHierarchicalIdP
 * ctypedef IExprId *IExprIdP
 */
typedef pssp::ast::IExprDomainOpenRangeValue *__pyx_t_9pssparser_11pssast_decl_IExprDomainOpenRangeValueP;

/* "pssast_decl.pxd":47
 * ctypedef IExprDomainOpenRangeList *IExprDomainOpenRangeListP
 * ctypedef IExprDomainOpenRangeValue *IExprDomainOpenRangeValueP
 * ctypedef IExprHierarchicalId *IExprHierarchicalIdP             # <<<<<<<<<<<<<<
 * ctypedef IExprId *IExprIdP
 * ctypedef IExprIn *IExprInP
 */
typedef pssp::ast::IExprHierarchicalId *__pyx_t_9pssparser_11pssast_decl_IExprHierarchicalIdP;

/* "pssast_decl.pxd":48
 * ctypedef IExprDomainOpenRangeValue *IExprDomainOpenRangeValueP
 * ctypedef IExprHierarchicalId *IExprHierarchicalIdP
 * ctypedef IExprId *IExprIdP             # <<<<<<<<<<<<<<
 * ctypedef IExprIn *IExprInP
 * ctypedef IExprMemberPathElem *IExprMemberPathElemP
 */
typedef pssp::ast::IExprId *__pyx_t_9pssparser_11pssast_decl_IExprIdP;

/* "pssast_decl.pxd":49
 * ctypedef IExprHierarchicalId *IExprHierarchicalIdP
 * ctypedef IExprId *IExprIdP
 * ctypedef IExprIn *IExprInP             # <<<<<<<<<<<<<<
 * ctypedef IExprMemberPathElem *IExprMemberPathElemP
 * ctypedef IExprNumber *IExprNumberP
 */
typedef pssp::ast::IExprIn *__pyx_t_9pssparser_11pssast_decl_IExprInP;

/* "pssast_decl.pxd":50
 * ctypedef IExprId *IExprIdP
 * ctypedef IExprIn *IExprInP
 * ctypedef IExprMemberPathElem *IExprMemberPathElemP             # <<<<<<<<<<<<<<
 * ctypedef IExprNumber *IExprNumberP
 * ctypedef IExprAggregateLiteral *IExprAggregateLiteralP
 */
typedef pssp::ast::IExprMemberPathElem *__pyx_t_9pssparser_11pssast_decl_IExprMemberPathElemP;

/* "pssast_decl.pxd":51
 * ctypedef IExprIn *IExprInP
 * ctypedef IExprMemberPathElem *IExprMemberPathElemP
 * ctypedef IExprNumber *IExprNumberP             # <<<<<<<<<<<<<<
 * ctypedef IExprAggregateLiteral *IExprAggregateLiteralP
 * ctypedef IExprOpenRangeList *IExprOpenRangeListP
 */
typedef pssp::ast::IExprNumber *__pyx_t_9pssparser_11pssast_decl_IExprNumberP;

/* "pssast_decl.pxd":52
 * ctypedef IExprMemberPathElem *IExprMemberPathElemP
 * ctypedef IExprNumber *IExprNumberP
 * ctypedef IExprAggregateLiteral *IExprAggregateLiteralP             # <<<<<<<<<<<<<<
 * ctypedef IExprOpenRangeList *IExprOpenRangeListP
 * ctypedef IExprOpenRangeValue *IExprOpenRangeValueP
 */
typedef pssp::ast::IExprAggregateLiteral *__pyx_t_9pssparser_11pssast_decl_IExprAggregateLiteralP;

/* "pssast_decl.pxd":53
 * ctypedef IExprNumber *IExprNumberP
 * ctypedef IExprAggregateLiteral *IExprAggregateLiteralP
 * ctypedef IExprOpenRangeList *IExprOpenRangeListP             # <<<<<<<<<<<<<<
 * ctypedef IExprOpenRangeValue *IExprOpenRangeValueP
 * ctypedef IExprRefPath *IExprRefPathP
 */
typedef pssp::ast::IExprOpenRangeList *__pyx_t_9pssparser_11pssast_decl_IExprOpenRangeListP;

/* "pssast_decl.pxd":54
 * ctypedef IExprAggregateLiteral *IExprAggregateLiteralP
 * ctypedef IExprOpenRangeList *IExprOpenRangeListP
 * ctypedef IExprOpenRangeValue *IExprOpenRangeValueP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPath *IExprRefPathP
 * ctypedef IExprRefPathElem *IExprRefPathElemP
 */
typedef pssp::ast::IExprOpenRangeValue *__pyx_t_9pssparser_11pssast_decl_IExprOpenRangeValueP;

/* "pssast_decl.pxd":55
 * ctypedef IExprOpenRangeList *IExprOpenRangeListP
 * ctypedef IExprOpenRangeValue *IExprOpenRangeValueP
 * ctypedef IExprRefPath *IExprRefPathP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathElem *IExprRefPathElemP
 * ctypedef IExprRefPathStaticRooted *IExprRefPathStaticRootedP
 */
typedef pssp::ast::IExprRefPath *__pyx_t_9pssparser_11pssast_decl_IExprRefPathP;

/* "pssast_decl.pxd":56
 * ctypedef IExprOpenRangeValue *IExprOpenRangeValueP
 * ctypedef IExprRefPath *IExprRefPathP
 * ctypedef IExprRefPathElem *IExprRefPathElemP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathStaticRooted *IExprRefPathStaticRootedP
 * ctypedef IExprStaticRefPath *IExprStaticRefPathP
 */
typedef pssp::ast::IExprRefPathElem *__pyx_t_9pssparser_11pssast_decl_IExprRefPathElemP;

/* "pssast_decl.pxd":57
 * ctypedef IExprRefPath *IExprRefPathP
 * ctypedef IExprRefPathElem *IExprRefPathElemP
 * ctypedef IExprRefPathStaticRooted *IExprRefPathStaticRootedP             # <<<<<<<<<<<<<<
 * ctypedef IExprStaticRefPath *IExprStaticRefPathP
 * ctypedef IExprString *IExprStringP
 */
typedef pssp::ast::IExprRefPathStaticRooted *__pyx_t_9pssparser_11pssast_decl_IExprRefPathStaticRootedP;

/* "pssast_decl.pxd":58
 * ctypedef IExprRefPathElem *IExprRefPathElemP
 * ctypedef IExprRefPathStaticRooted *IExprRefPathStaticRootedP
 * ctypedef IExprStaticRefPath *IExprStaticRefPathP             # <<<<<<<<<<<<<<
 * ctypedef IExprString *IExprStringP
 * ctypedef IExprSubscript *IExprSubscriptP
 */
typedef pssp::ast::IExprStaticRefPath *__pyx_t_9pssparser_11pssast_decl_IExprStaticRefPathP;

/* "pssast_decl.pxd":59
 * ctypedef IExprRefPathStaticRooted *IExprRefPathStaticRootedP
 * ctypedef IExprStaticRefPath *IExprStaticRefPathP
 * ctypedef IExprString *IExprStringP             # <<<<<<<<<<<<<<
 * ctypedef IExprSubscript *IExprSubscriptP
 * ctypedef IExprUnary *IExprUnaryP
 */
typedef pssp::ast::IExprString *__pyx_t_9pssparser_11pssast_decl_IExprStringP;

/* "pssast_decl.pxd":60
 * ctypedef IExprStaticRefPath *IExprStaticRefPathP
 * ctypedef IExprString *IExprStringP
 * ctypedef IExprSubscript *IExprSubscriptP             # <<<<<<<<<<<<<<
 * ctypedef IExprUnary *IExprUnaryP
 * ctypedef IMethodParameterList *IMethodParameterListP
 */
typedef pssp::ast::IExprSubscript *__pyx_t_9pssparser_11pssast_decl_IExprSubscriptP;

/* "pssast_decl.pxd":61
 * ctypedef IExprString *IExprStringP
 * ctypedef IExprSubscript *IExprSubscriptP
 * ctypedef IExprUnary *IExprUnaryP             # <<<<<<<<<<<<<<
 * ctypedef IMethodParameterList *IMethodParameterListP
 * ctypedef ITypeIdentifier *ITypeIdentifierP
 */
typedef pssp::ast::IExprUnary *__pyx_t_9pssparser_11pssast_decl_IExprUnaryP;

/* "pssast_decl.pxd":62
 * ctypedef IExprSubscript *IExprSubscriptP
 * ctypedef IExprUnary *IExprUnaryP
 * ctypedef IMethodParameterList *IMethodParameterListP             # <<<<<<<<<<<<<<
 * ctypedef ITypeIdentifier *ITypeIdentifierP
 * ctypedef ITypeIdentifierElem *ITypeIdentifierElemP
 */
typedef pssp::ast::IMethodParameterList *__pyx_t_9pssparser_11pssast_decl_IMethodParameterListP;

/* "pssast_decl.pxd":63
 * ctypedef IExprUnary *IExprUnaryP
 * ctypedef IMethodParameterList *IMethodParameterListP
 * ctypedef ITypeIdentifier *ITypeIdentifierP             # <<<<<<<<<<<<<<
 * ctypedef ITypeIdentifierElem *ITypeIdentifierElemP
 * ctypedef IRefExprTypeScopeGlobal *IRefExprTypeScopeGlobalP
 */
typedef pssp::ast::ITypeIdentifier *__pyx_t_9pssparser_11pssast_decl_ITypeIdentifierP;

/* "pssast_decl.pxd":64
 * ctypedef IMethodParameterList *IMethodParameterListP
 * ctypedef ITypeIdentifier *ITypeIdentifierP
 * ctypedef ITypeIdentifierElem *ITypeIdentifierElemP             # <<<<<<<<<<<<<<
 * ctypedef IRefExprTypeScopeGlobal *IRefExprTypeScopeGlobalP
 * ctypedef IRefExprTypeScopeContext *IRefExprTypeScopeContextP
 */
typedef pssp::ast::ITypeIdentifierElem *__pyx_t_9pssparser_11pssast_decl_ITypeIdentifierElemP;

/* "pssast_decl.pxd":65
 * ctypedef ITypeIdentifier *ITypeIdentifierP
 * ctypedef ITypeIdentifierElem *ITypeIdentifierElemP
 * ctypedef IRefExprTypeScopeGlobal *IRefExprTypeScopeGlobalP             # <<<<<<<<<<<<<<
 * ctypedef IRefExprTypeScopeContext *IRefExprTypeScopeContextP
 * ctypedef IRefExprScopeIndex *IRefExprScopeIndexP
 */
typedef pssp::ast::IRefExprTypeScopeGlobal *__pyx_t_9pssparser_11pssast_decl_IRefExprTypeScopeGlobalP;

/* "pssast_decl.pxd":66
 * ctypedef ITypeIdentifierElem *ITypeIdentifierElemP
 * ctypedef IRefExprTypeScopeGlobal *IRefExprTypeScopeGlobalP
 * ctypedef IRefExprTypeScopeContext *IRefExprTypeScopeContextP             # <<<<<<<<<<<<<<
 * ctypedef IRefExprScopeIndex *IRefExprScopeIndexP
 * ctypedef ITemplateGenericTypeParamDecl *ITemplateGenericTypeParamDeclP
 */
typedef pssp::ast::IRefExprTypeScopeContext *__pyx_t_9pssparser_11pssast_decl_IRefExprTypeScopeContextP;

/* "pssast_decl.pxd":67
 * ctypedef IRefExprTypeScopeGlobal *IRefExprTypeScopeGlobalP
 * ctypedef IRefExprTypeScopeContext *IRefExprTypeScopeContextP
 * ctypedef IRefExprScopeIndex *IRefExprScopeIndexP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateGenericTypeParamDecl *ITemplateGenericTypeParamDeclP
 * ctypedef ITemplateCategoryTypeParamDecl *ITemplateCategoryTypeParamDeclP
 */
typedef pssp::ast::IRefExprScopeIndex *__pyx_t_9pssparser_11pssast_decl_IRefExprScopeIndexP;

/* "pssast_decl.pxd":68
 * ctypedef IRefExprTypeScopeContext *IRefExprTypeScopeContextP
 * ctypedef IRefExprScopeIndex *IRefExprScopeIndexP
 * ctypedef ITemplateGenericTypeParamDecl *ITemplateGenericTypeParamDeclP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateCategoryTypeParamDecl *ITemplateCategoryTypeParamDeclP
 * ctypedef ITemplateValueParamDecl *ITemplateValueParamDeclP
 */
typedef pssp::ast::ITemplateGenericTypeParamDecl *__pyx_t_9pssparser_11pssast_decl_ITemplateGenericTypeParamDeclP;

/* "pssast_decl.pxd":69
 * ctypedef IRefExprScopeIndex *IRefExprScopeIndexP
 * ctypedef ITemplateGenericTypeParamDecl *ITemplateGenericTypeParamDeclP
 * ctypedef ITemplateCategoryTypeParamDecl *ITemplateCategoryTypeParamDeclP             # <<<<<<<<<<<<<<
 * ctypedef ITemplateValueParamDecl *ITemplateValueParamDeclP
 * ctypedef IConstraintBlock *IConstraintBlockP
 */
typedef pssp::ast::ITemplateCategoryTypeParamDecl *__pyx_t_9pssparser_11pssast_decl_ITemplateCategoryTypeParamDeclP;

/* "pssast_decl.pxd":70
 * ctypedef ITemplateGenericTypeParamDecl *ITemplateGenericTypeParamDeclP
 * ctypedef ITemplateCategoryTypeParamDecl *ITemplateCategoryTypeParamDeclP
 * ctypedef ITemplateValueParamDecl *ITemplateValueParamDeclP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintBlock *IConstraintBlockP
 * ctypedef IConstraintScope *IConstraintScopeP
 */
typedef pssp::ast::ITemplateValueParamDecl *__pyx_t_9pssparser_11pssast_decl_ITemplateValueParamDeclP;

/* "pssast_decl.pxd":71
 * ctypedef ITemplateCategoryTypeParamDecl *ITemplateCategoryTypeParamDeclP
 * ctypedef ITemplateValueParamDecl *ITemplateValueParamDeclP
 * ctypedef IConstraintBlock *IConstraintBlockP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintScope *IConstraintScopeP
 * ctypedef IConstraintStmtDefault *IConstraintStmtDefaultP
 */
typedef pssp::ast::IConstraintBlock *__pyx_t_9pssparser_11pssast_decl_IConstraintBlockP;

/* "pssast_decl.pxd":72
 * ctypedef ITemplateValueParamDecl *ITemplateValueParamDeclP
 * ctypedef IConstraintBlock *IConstraintBlockP
 * ctypedef IConstraintScope *IConstraintScopeP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtDefault *IConstraintStmtDefaultP
 * ctypedef IConstraintStmtDefaultDisable *IConstraintStmtDefaultDisableP
 */
typedef pssp::ast::IConstraintScope *__pyx_t_9pssparser_11pssast_decl_IConstraintScopeP;

/* "pssast_decl.pxd":73
 * ctypedef IConstraintBlock *IConstraintBlockP
 * ctypedef IConstraintScope *IConstraintScopeP
 * ctypedef IConstraintStmtDefault *IConstraintStmtDefaultP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtDefaultDisable *IConstraintStmtDefaultDisableP
 * ctypedef IConstraintStmtExpr *IConstraintStmtExprP
 */
typedef pssp::ast::IConstraintStmtDefault *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtDefaultP;

/* "pssast_decl.pxd":74
 * ctypedef IConstraintScope *IConstraintScopeP
 * ctypedef IConstraintStmtDefault *IConstraintStmtDefaultP
 * ctypedef IConstraintStmtDefaultDisable *IConstraintStmtDefaultDisableP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtExpr *IConstraintStmtExprP
 * ctypedef IConstraintStmtField *IConstraintStmtFieldP
 */
typedef pssp::ast::IConstraintStmtDefaultDisable *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtDefaultDisableP;

/* "pssast_decl.pxd":75
 * ctypedef IConstraintStmtDefault *IConstraintStmtDefaultP
 * ctypedef IConstraintStmtDefaultDisable *IConstraintStmtDefaultDisableP
 * ctypedef IConstraintStmtExpr *IConstraintStmtExprP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtField *IConstraintStmtFieldP
 * ctypedef IConstraintStmtIf *IConstraintStmtIfP
 */
typedef pssp::ast::IConstraintStmtExpr *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtExprP;

/* "pssast_decl.pxd":76
 * ctypedef IConstraintStmtDefaultDisable *IConstraintStmtDefaultDisableP
 * ctypedef IConstraintStmtExpr *IConstraintStmtExprP
 * ctypedef IConstraintStmtField *IConstraintStmtFieldP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtIf *IConstraintStmtIfP
 * ctypedef IConstraintStmtUnique *IConstraintStmtUniqueP
 */
typedef pssp::ast::IConstraintStmtField *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtFieldP;

/* "pssast_decl.pxd":77
 * ctypedef IConstraintStmtExpr *IConstraintStmtExprP
 * ctypedef IConstraintStmtField *IConstraintStmtFieldP
 * ctypedef IConstraintStmtIf *IConstraintStmtIfP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtUnique *IConstraintStmtUniqueP
 * ctypedef IGlobalScope *IGlobalScopeP
 */
typedef pssp::ast::IConstraintStmtIf *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtIfP;

/* "pssast_decl.pxd":78
 * ctypedef IConstraintStmtField *IConstraintStmtFieldP
 * ctypedef IConstraintStmtIf *IConstraintStmtIfP
 * ctypedef IConstraintStmtUnique *IConstraintStmtUniqueP             # <<<<<<<<<<<<<<
 * ctypedef IGlobalScope *IGlobalScopeP
 * ctypedef INamedScope *INamedScopeP
 */
typedef pssp::ast::IConstraintStmtUnique *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtUniqueP;

/* "pssast_decl.pxd":79
 * ctypedef IConstraintStmtIf *IConstraintStmtIfP
 * ctypedef IConstraintStmtUnique *IConstraintStmtUniqueP
 * ctypedef IGlobalScope *IGlobalScopeP             # <<<<<<<<<<<<<<
 * ctypedef INamedScope *INamedScopeP
 * ctypedef IPackageScope *IPackageScopeP
 */
typedef pssp::ast::IGlobalScope *__pyx_t_9pssparser_11pssast_decl_IGlobalScopeP;

/* "pssast_decl.pxd":80
 * ctypedef IConstraintStmtUnique *IConstraintStmtUniqueP
 * ctypedef IGlobalScope *IGlobalScopeP
 * ctypedef INamedScope *INamedScopeP             # <<<<<<<<<<<<<<
 * ctypedef IPackageScope *IPackageScopeP
 * ctypedef IDataTypeArray *IDataTypeArrayP
 */
typedef pssp::ast::INamedScope *__pyx_t_9pssparser_11pssast_decl_INamedScopeP;

/* "pssast_decl.pxd":81
 * ctypedef IGlobalScope *IGlobalScopeP
 * ctypedef INamedScope *INamedScopeP
 * ctypedef IPackageScope *IPackageScopeP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeArray *IDataTypeArrayP
 * ctypedef IDataTypeBool *IDataTypeBoolP
 */
typedef pssp::ast::IPackageScope *__pyx_t_9pssparser_11pssast_decl_IPackageScopeP;

/* "pssast_decl.pxd":82
 * ctypedef INamedScope *INamedScopeP
 * ctypedef IPackageScope *IPackageScopeP
 * ctypedef IDataTypeArray *IDataTypeArrayP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeBool *IDataTypeBoolP
 * ctypedef IDataTypeChandle *IDataTypeChandleP
 */
typedef pssp::ast::IDataTypeArray *__pyx_t_9pssparser_11pssast_decl_IDataTypeArrayP;

/* "pssast_decl.pxd":83
 * ctypedef IPackageScope *IPackageScopeP
 * ctypedef IDataTypeArray *IDataTypeArrayP
 * ctypedef IDataTypeBool *IDataTypeBoolP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeChandle *IDataTypeChandleP
 * ctypedef IDataTypeEnum *IDataTypeEnumP
 */
typedef pssp::ast::IDataTypeBool *__pyx_t_9pssparser_11pssast_decl_IDataTypeBoolP;

/* "pssast_decl.pxd":84
 * ctypedef IDataTypeArray *IDataTypeArrayP
 * ctypedef IDataTypeBool *IDataTypeBoolP
 * ctypedef IDataTypeChandle *IDataTypeChandleP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeEnum *IDataTypeEnumP
 * ctypedef IDataTypeInt *IDataTypeIntP
 */
typedef pssp::ast::IDataTypeChandle *__pyx_t_9pssparser_11pssast_decl_IDataTypeChandleP;

/* "pssast_decl.pxd":85
 * ctypedef IDataTypeBool *IDataTypeBoolP
 * ctypedef IDataTypeChandle *IDataTypeChandleP
 * ctypedef IDataTypeEnum *IDataTypeEnumP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeInt *IDataTypeIntP
 * ctypedef IDataTypeString *IDataTypeStringP
 */
typedef pssp::ast::IDataTypeEnum *__pyx_t_9pssparser_11pssast_decl_IDataTypeEnumP;

/* "pssast_decl.pxd":86
 * ctypedef IDataTypeChandle *IDataTypeChandleP
 * ctypedef IDataTypeEnum *IDataTypeEnumP
 * ctypedef IDataTypeInt *IDataTypeIntP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeString *IDataTypeStringP
 * ctypedef IDataTypeUserDefined *IDataTypeUserDefinedP
 */
typedef pssp::ast::IDataTypeInt *__pyx_t_9pssparser_11pssast_decl_IDataTypeIntP;

/* "pssast_decl.pxd":87
 * ctypedef IDataTypeEnum *IDataTypeEnumP
 * ctypedef IDataTypeInt *IDataTypeIntP
 * ctypedef IDataTypeString *IDataTypeStringP             # <<<<<<<<<<<<<<
 * ctypedef IDataTypeUserDefined *IDataTypeUserDefinedP
 * ctypedef IExprRefPathContext *IExprRefPathContextP
 */
typedef pssp::ast::IDataTypeString *__pyx_t_9pssparser_11pssast_decl_IDataTypeStringP;

/* "pssast_decl.pxd":88
 * ctypedef IDataTypeInt *IDataTypeIntP
 * ctypedef IDataTypeString *IDataTypeStringP
 * ctypedef IDataTypeUserDefined *IDataTypeUserDefinedP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathContext *IExprRefPathContextP
 * ctypedef IExprRefPathStatic *IExprRefPathStaticP
 */
typedef pssp::ast::IDataTypeUserDefined *__pyx_t_9pssparser_11pssast_decl_IDataTypeUserDefinedP;

/* "pssast_decl.pxd":89
 * ctypedef IDataTypeString *IDataTypeStringP
 * ctypedef IDataTypeUserDefined *IDataTypeUserDefinedP
 * ctypedef IExprRefPathContext *IExprRefPathContextP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathStatic *IExprRefPathStaticP
 * ctypedef IExprSignedNumber *IExprSignedNumberP
 */
typedef pssp::ast::IExprRefPathContext *__pyx_t_9pssparser_11pssast_decl_IExprRefPathContextP;

/* "pssast_decl.pxd":90
 * ctypedef IDataTypeUserDefined *IDataTypeUserDefinedP
 * ctypedef IExprRefPathContext *IExprRefPathContextP
 * ctypedef IExprRefPathStatic *IExprRefPathStaticP             # <<<<<<<<<<<<<<
 * ctypedef IExprSignedNumber *IExprSignedNumberP
 * ctypedef IExprUnsignedNumber *IExprUnsignedNumberP
 */
typedef pssp::ast::IExprRefPathStatic *__pyx_t_9pssparser_11pssast_decl_IExprRefPathStaticP;

/* "pssast_decl.pxd":91
 * ctypedef IExprRefPathContext *IExprRefPathContextP
 * ctypedef IExprRefPathStatic *IExprRefPathStaticP
 * ctypedef IExprSignedNumber *IExprSignedNumberP             # <<<<<<<<<<<<<<
 * ctypedef IExprUnsignedNumber *IExprUnsignedNumberP
 * ctypedef IConstraintStmtForall *IConstraintStmtForallP
 */
typedef pssp::ast::IExprSignedNumber *__pyx_t_9pssparser_11pssast_decl_IExprSignedNumberP;

/* "pssast_decl.pxd":92
 * ctypedef IExprRefPathStatic *IExprRefPathStaticP
 * ctypedef IExprSignedNumber *IExprSignedNumberP
 * ctypedef IExprUnsignedNumber *IExprUnsignedNumberP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtForall *IConstraintStmtForallP
 * ctypedef IConstraintStmtForeach *IConstraintStmtForeachP
 */
typedef pssp::ast::IExprUnsignedNumber *__pyx_t_9pssparser_11pssast_decl_IExprUnsignedNumberP;

/* "pssast_decl.pxd":93
 * ctypedef IExprSignedNumber *IExprSignedNumberP
 * ctypedef IExprUnsignedNumber *IExprUnsignedNumberP
 * ctypedef IConstraintStmtForall *IConstraintStmtForallP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtForeach *IConstraintStmtForeachP
 * ctypedef IConstraintStmtImplication *IConstraintStmtImplicationP
 */
typedef pssp::ast::IConstraintStmtForall *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtForallP;

/* "pssast_decl.pxd":94
 * ctypedef IExprUnsignedNumber *IExprUnsignedNumberP
 * ctypedef IConstraintStmtForall *IConstraintStmtForallP
 * ctypedef IConstraintStmtForeach *IConstraintStmtForeachP             # <<<<<<<<<<<<<<
 * ctypedef IConstraintStmtImplication *IConstraintStmtImplicationP
 * ctypedef ITypeScope *ITypeScopeP
 */
typedef pssp::ast::IConstraintStmtForeach *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtForeachP;

/* "pssast_decl.pxd":95
 * ctypedef IConstraintStmtForall *IConstraintStmtForallP
 * ctypedef IConstraintStmtForeach *IConstraintStmtForeachP
 * ctypedef IConstraintStmtImplication *IConstraintStmtImplicationP             # <<<<<<<<<<<<<<
 * ctypedef ITypeScope *ITypeScopeP
 * ctypedef IExprRefPathStaticFunc *IExprRefPathStaticFuncP
 */
typedef pssp::ast::IConstraintStmtImplication *__pyx_t_9pssparser_11pssast_decl_IConstraintStmtImplicationP;

/* "pssast_decl.pxd":96
 * ctypedef IConstraintStmtForeach *IConstraintStmtForeachP
 * ctypedef IConstraintStmtImplication *IConstraintStmtImplicationP
 * ctypedef ITypeScope *ITypeScopeP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathStaticFunc *IExprRefPathStaticFuncP
 * ctypedef IExprRefPathSuper *IExprRefPathSuperP
 */
typedef pssp::ast::ITypeScope *__pyx_t_9pssparser_11pssast_decl_ITypeScopeP;

/* "pssast_decl.pxd":97
 * ctypedef IConstraintStmtImplication *IConstraintStmtImplicationP
 * ctypedef ITypeScope *ITypeScopeP
 * ctypedef IExprRefPathStaticFunc *IExprRefPathStaticFuncP             # <<<<<<<<<<<<<<
 * ctypedef IExprRefPathSuper *IExprRefPathSuperP
 * ctypedef IAction *IActionP
 */
typedef pssp::ast::IExprRefPathStaticFunc *__pyx_t_9pssparser_11pssast_decl_IExprRefPathStaticFuncP;

/* "pssast_decl.pxd":98
 * ctypedef ITypeScope *ITypeScopeP
 * ctypedef IExprRefPathStaticFunc *IExprRefPathStaticFuncP
 * ctypedef IExprRefPathSuper *IExprRefPathSuperP             # <<<<<<<<<<<<<<
 * ctypedef IAction *IActionP
 * ctypedef IComponent *IComponentP
 */
typedef pssp::ast::IExprRefPathSuper *__pyx_t_9pssparser_11pssast_decl_IExprRefPathSuperP;

/* "pssast_decl.pxd":99
 * ctypedef IExprRefPathStaticFunc *IExprRefPathStaticFuncP
 * ctypedef IExprRefPathSuper *IExprRefPathSuperP
 * ctypedef IAction *IActionP             # <<<<<<<<<<<<<<
 * ctypedef IComponent *IComponentP
 * ctypedef IStruct *IStructP
 */
typedef pssp::ast::IAction *__pyx_t_9pssparser_11pssast_decl_IActionP;

/* "pssast_decl.pxd":100
 * ctypedef IExprRefPathSuper *IExprRefPathSuperP
 * ctypedef IAction *IActionP
 * ctypedef IComponent *IComponentP             # <<<<<<<<<<<<<<
 * ctypedef IStruct *IStructP
 * ctypedef IState *IStateP
 */
typedef pssp::ast::IComponent *__pyx_t_9pssparser_11pssast_decl_IComponentP;

/* "pssast_decl.pxd":101
 * ctypedef IAction *IActionP
 * ctypedef IComponent *IComponentP
 * ctypedef IStruct *IStructP             # <<<<<<<<<<<<<<
 * ctypedef IState *IStateP
 * ctypedef IStream *IStreamP
 */
typedef pssp::ast::IStruct *__pyx_t_9pssparser_11pssast_decl_IStructP;

/* "pssast_decl.pxd":102
 * ctypedef IComponent *IComponentP
 * ctypedef IStruct *IStructP
 * ctypedef IState *IStateP             # <<<<<<<<<<<<<<
 * ctypedef IStream *IStreamP
 * ctypedef IBuffer *IBufferP
 */
typedef pssp::ast::IState *__pyx_t_9pssparser_11pssast_decl_IStateP;

/* "pssast_decl.pxd":103
 * ctypedef IStruct *IStructP
 * ctypedef IState *IStateP
 * ctypedef IStream *IStreamP             # <<<<<<<<<<<<<<
 * ctypedef IBuffer *IBufferP
 * ctypedef IResource *IResourceP
 */
typedef pssp::ast::IStream *__pyx_t_9pssparser_11pssast_decl_IStreamP;

/* "pssast_decl.pxd":104
 * ctypedef IState *IStateP
 * ctypedef IStream *IStreamP
 * ctypedef IBuffer *IBufferP             # <<<<<<<<<<<<<<
 * ctypedef IResource *IResourceP
 * cdef extern from "pssp/ast/ExprBinOp.h" namespace "pssp::ast":
 */
typedef pssp::ast::IBuffer *__pyx_t_9pssparser_11pssast_decl_IBufferP;

/* "pssast_decl.pxd":105
 * ctypedef IStream *IStreamP
 * ctypedef IBuffer *IBufferP
 * ctypedef IResource *IResourceP             # <<<<<<<<<<<<<<
 * cdef extern from "pssp/ast/ExprBinOp.h" namespace "pssp::ast":
 *     cdef enum ExprBinOp:
 */
typedef pssp::ast::IResource *__pyx_t_9pssparser_11pssast_decl_IResourceP;

/* "../python/lib/python3.7/site-packages/ciostream/__init__.pxd":38
 *         _costream(cpy_ref.PyObject *)
 * 
 * cdef class cistream(object):             # <<<<<<<<<<<<<<
 *     cdef istream           *_hndl
 *     cdef istream *stream(self)
 */
struct __pyx_obj_9ciostream_cistream {
  PyObject_HEAD
  struct __pyx_vtabstruct_9ciostream_cistream *__pyx_vtab;
  std::istream *_hndl;
};


/* "../python/lib/python3.7/site-packages/ciostream/__init__.pxd":42
 *     cdef istream *stream(self)
 * 
 * cdef class costream(object):             # <<<<<<<<<<<<<<
 *     cdef ostream           *_hndl
 *     cdef ostream *stream(self)
 */
struct __pyx_obj_9ciostream_costream {
  PyObject_HEAD
  struct __pyx_vtabstruct_9ciostream_costream *__pyx_vtab;
  std::ostream *_hndl;
};


/* "pssparser/pssast.pxd":23
 * 
 * from pssparser cimport pssast_decl
 * cdef class Factory(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IFactory *_hndl
 *     cpdef ExecStmt mkExecStmt(self)
 */
struct __pyx_obj_9pssparser_6pssast_Factory {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_Factory *__pyx_vtab;
  pssp::ast::IFactory *_hndl;
};


/* "pssparser/pssast.pxd":224
 *     @staticmethod
 *     cdef mk(pssast_decl.IFactory *hndl)
 * cdef class ExecStmt(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IExecStmt    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_ExecStmt {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt *__pyx_vtab;
  pssp::ast::IExecStmt *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":233
 *     cdef ExecStmt mk(pssast_decl.IExecStmt *hndl, bool owned)
 * 
 * cdef class Expr(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IExpr    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_Expr {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr *__pyx_vtab;
  pssp::ast::IExpr *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":242
 *     cdef Expr mk(pssast_decl.IExpr *hndl, bool owned)
 * 
 * cdef class RefExpr(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IRefExpr    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_RefExpr {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr *__pyx_vtab;
  pssp::ast::IRefExpr *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":251
 *     cdef RefExpr mk(pssast_decl.IRefExpr *hndl, bool owned)
 * 
 * cdef class TemplateParamDeclList(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamDeclList    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDeclList *__pyx_vtab;
  pssp::ast::ITemplateParamDeclList *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":260
 *     cdef TemplateParamDeclList mk(pssast_decl.ITemplateParamDeclList *hndl, bool owned)
 * 
 * cdef class TemplateParamDecl(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamDecl    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl *__pyx_vtab;
  pssp::ast::ITemplateParamDecl *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":269
 *     cdef TemplateParamDecl mk(pssast_decl.ITemplateParamDecl *hndl, bool owned)
 * 
 * cdef class ScopeChild(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IScopeChild    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_ScopeChild {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild *__pyx_vtab;
  pssp::ast::IScopeChild *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":280
 *     cpdef int32_t getIndex(self)
 * 
 * cdef class TemplateParamValueList(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamValueList    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValueList *__pyx_vtab;
  pssp::ast::ITemplateParamValueList *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":289
 *     cdef TemplateParamValueList mk(pssast_decl.ITemplateParamValueList *hndl, bool owned)
 * 
 * cdef class TemplateParamValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamValue    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValue *__pyx_vtab;
  pssp::ast::ITemplateParamValue *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":298
 *     cdef TemplateParamValue mk(pssast_decl.ITemplateParamValue *hndl, bool owned)
 * 
 * cdef class TemplateParamTypeValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamTypeValue    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamTypeValue *__pyx_vtab;
  pssp::ast::ITemplateParamTypeValue *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":307
 *     cdef TemplateParamTypeValue mk(pssast_decl.ITemplateParamTypeValue *hndl, bool owned)
 * 
 * cdef class TemplateParamExprValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamExprValue    *_hndl
 *     cdef bool           _owned
 */
struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamExprValue *__pyx_vtab;
  pssp::ast::ITemplateParamExprValue *_hndl;
  bool _owned;
};


/* "pssparser/pssast.pxd":316
 *     cdef TemplateParamExprValue mk(pssast_decl.ITemplateParamExprValue *hndl, bool owned)
 * 
 * cdef class ConstraintStmt(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmt *asConstraintStmt(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmt {
  struct __pyx_obj_9pssparser_6pssast_ScopeChild __pyx_base;
};


/* "pssparser/pssast.pxd":322
 *     cdef ConstraintStmt mk(pssast_decl.IConstraintStmt *hndl, bool owned)
 * 
 * cdef class Scope(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IScope *asScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_Scope {
  struct __pyx_obj_9pssparser_6pssast_ScopeChild __pyx_base;
};


/* "pssparser/pssast.pxd":328
 *     cdef Scope mk(pssast_decl.IScope *hndl, bool owned)
 * 
 * cdef class NamedScopeChild(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.INamedScopeChild *asNamedScopeChild(self)
 */
struct __pyx_obj_9pssparser_6pssast_NamedScopeChild {
  struct __pyx_obj_9pssparser_6pssast_ScopeChild __pyx_base;
};


/* "pssparser/pssast.pxd":334
 *     cdef NamedScopeChild mk(pssast_decl.INamedScopeChild *hndl, bool owned)
 * 
 * cdef class PackageImportStmt(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IPackageImportStmt *asPackageImportStmt(self)
 */
struct __pyx_obj_9pssparser_6pssast_PackageImportStmt {
  struct __pyx_obj_9pssparser_6pssast_ScopeChild __pyx_base;
};


/* "pssparser/pssast.pxd":341
 *     cpdef bool getWildcard(self)
 * 
 * cdef class DataType(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataType *asDataType(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataType {
  struct __pyx_obj_9pssparser_6pssast_ScopeChild __pyx_base;
};


/* "pssparser/pssast.pxd":347
 *     cdef DataType mk(pssast_decl.IDataType *hndl, bool owned)
 * 
 * cdef class ExecScope(ExecStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExecScope *asExecScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExecScope {
  struct __pyx_obj_9pssparser_6pssast_ExecStmt __pyx_base;
};


/* "pssparser/pssast.pxd":353
 *     cdef ExecScope mk(pssast_decl.IExecScope *hndl, bool owned)
 * 
 * cdef class ProceduralStmtDataDeclaration(ExecStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IProceduralStmtDataDeclaration *asProceduralStmtDataDeclaration(self)
 */
struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration {
  struct __pyx_obj_9pssparser_6pssast_ExecStmt __pyx_base;
};


/* "pssparser/pssast.pxd":359
 *     cdef ProceduralStmtDataDeclaration mk(pssast_decl.IProceduralStmtDataDeclaration *hndl, bool owned)
 * 
 * cdef class ExprBin(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBin *asExprBin(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprBin {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":365
 *     cdef ExprBin mk(pssast_decl.IExprBin *hndl, bool owned)
 * 
 * cdef class ExprBitSlice(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBitSlice *asExprBitSlice(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprBitSlice {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":371
 *     cdef ExprBitSlice mk(pssast_decl.IExprBitSlice *hndl, bool owned)
 * 
 * cdef class ExprBool(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBool *asExprBool(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprBool {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":378
 *     cpdef bool getValue(self)
 * 
 * cdef class ExprCast(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCast *asExprCast(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprCast {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":384
 *     cdef ExprCast mk(pssast_decl.IExprCast *hndl, bool owned)
 * 
 * cdef class ExprCompileHas(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCompileHas *asExprCompileHas(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprCompileHas {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":390
 *     cdef ExprCompileHas mk(pssast_decl.IExprCompileHas *hndl, bool owned)
 * 
 * cdef class ExprCond(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCond *asExprCond(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprCond {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":396
 *     cdef ExprCond mk(pssast_decl.IExprCond *hndl, bool owned)
 * 
 * cdef class ExprDomainOpenRangeList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprDomainOpenRangeList *asExprDomainOpenRangeList(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":402
 *     cdef ExprDomainOpenRangeList mk(pssast_decl.IExprDomainOpenRangeList *hndl, bool owned)
 * 
 * cdef class ExprDomainOpenRangeValue(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprDomainOpenRangeValue *asExprDomainOpenRangeValue(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":409
 *     cpdef bool getSingle(self)
 * 
 * cdef class ExprHierarchicalId(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprHierarchicalId *asExprHierarchicalId(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":415
 *     cdef ExprHierarchicalId mk(pssast_decl.IExprHierarchicalId *hndl, bool owned)
 * 
 * cdef class ExprId(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprId *asExprId(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprId {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":423
 *     cpdef bool getIs_escaped(self)
 * 
 * cdef class ExprIn(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprIn *asExprIn(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprIn {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":429
 *     cdef ExprIn mk(pssast_decl.IExprIn *hndl, bool owned)
 * 
 * cdef class ExprMemberPathElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprMemberPathElem *asExprMemberPathElem(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":436
 *     cpdef int32_t getTarget(self)
 * 
 * cdef class ExprNumber(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprNumber *asExprNumber(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprNumber {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":442
 *     cdef ExprNumber mk(pssast_decl.IExprNumber *hndl, bool owned)
 * 
 * cdef class ExprAggregateLiteral(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprAggregateLiteral *asExprAggregateLiteral(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":448
 *     cdef ExprAggregateLiteral mk(pssast_decl.IExprAggregateLiteral *hndl, bool owned)
 * 
 * cdef class ExprOpenRangeList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprOpenRangeList *asExprOpenRangeList(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":454
 *     cdef ExprOpenRangeList mk(pssast_decl.IExprOpenRangeList *hndl, bool owned)
 * 
 * cdef class ExprOpenRangeValue(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprOpenRangeValue *asExprOpenRangeValue(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":460
 *     cdef ExprOpenRangeValue mk(pssast_decl.IExprOpenRangeValue *hndl, bool owned)
 * 
 * cdef class ExprRefPath(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPath *asExprRefPath(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPath {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":466
 *     cdef ExprRefPath mk(pssast_decl.IExprRefPath *hndl, bool owned)
 * 
 * cdef class ExprRefPathElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathElem *asExprRefPathElem(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":472
 *     cdef ExprRefPathElem mk(pssast_decl.IExprRefPathElem *hndl, bool owned)
 * 
 * cdef class ExprRefPathStaticRooted(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStaticRooted *asExprRefPathStaticRooted(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":478
 *     cdef ExprRefPathStaticRooted mk(pssast_decl.IExprRefPathStaticRooted *hndl, bool owned)
 * 
 * cdef class ExprStaticRefPath(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprStaticRefPath *asExprStaticRefPath(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":485
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprString(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprString *asExprString(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprString {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":493
 *     cpdef bool getIs_raw(self)
 * 
 * cdef class ExprSubscript(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprSubscript *asExprSubscript(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprSubscript {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":499
 *     cdef ExprSubscript mk(pssast_decl.IExprSubscript *hndl, bool owned)
 * 
 * cdef class ExprUnary(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprUnary *asExprUnary(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprUnary {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":505
 *     cdef ExprUnary mk(pssast_decl.IExprUnary *hndl, bool owned)
 * 
 * cdef class MethodParameterList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IMethodParameterList *asMethodParameterList(self)
 */
struct __pyx_obj_9pssparser_6pssast_MethodParameterList {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":511
 *     cdef MethodParameterList mk(pssast_decl.IMethodParameterList *hndl, bool owned)
 * 
 * cdef class TypeIdentifier(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeIdentifier *asTypeIdentifier(self)
 */
struct __pyx_obj_9pssparser_6pssast_TypeIdentifier {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":517
 *     cdef TypeIdentifier mk(pssast_decl.ITypeIdentifier *hndl, bool owned)
 * 
 * cdef class TypeIdentifierElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeIdentifierElem *asTypeIdentifierElem(self)
 */
struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem {
  struct __pyx_obj_9pssparser_6pssast_Expr __pyx_base;
};


/* "pssparser/pssast.pxd":523
 *     cdef TypeIdentifierElem mk(pssast_decl.ITypeIdentifierElem *hndl, bool owned)
 * 
 * cdef class RefExprTypeScopeGlobal(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprTypeScopeGlobal *asRefExprTypeScopeGlobal(self)
 */
struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal {
  struct __pyx_obj_9pssparser_6pssast_RefExpr __pyx_base;
};


/* "pssparser/pssast.pxd":530
 *     cpdef int32_t getFileid(self)
 * 
 * cdef class RefExprTypeScopeContext(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprTypeScopeContext *asRefExprTypeScopeContext(self)
 */
struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext {
  struct __pyx_obj_9pssparser_6pssast_RefExpr __pyx_base;
};


/* "pssparser/pssast.pxd":537
 *     cpdef int32_t getOffset(self)
 * 
 * cdef class RefExprScopeIndex(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprScopeIndex *asRefExprScopeIndex(self)
 */
struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex {
  struct __pyx_obj_9pssparser_6pssast_RefExpr __pyx_base;
};


/* "pssparser/pssast.pxd":544
 *     cpdef int32_t getOffset(self)
 * 
 * cdef class TemplateGenericTypeParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateGenericTypeParamDecl *asTemplateGenericTypeParamDecl(self)
 */
struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl {
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl __pyx_base;
};


/* "pssparser/pssast.pxd":550
 *     cdef TemplateGenericTypeParamDecl mk(pssast_decl.ITemplateGenericTypeParamDecl *hndl, bool owned)
 * 
 * cdef class TemplateCategoryTypeParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateCategoryTypeParamDecl *asTemplateCategoryTypeParamDecl(self)
 */
struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl {
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl __pyx_base;
};


/* "pssparser/pssast.pxd":556
 *     cdef TemplateCategoryTypeParamDecl mk(pssast_decl.ITemplateCategoryTypeParamDecl *hndl, bool owned)
 * 
 * cdef class TemplateValueParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateValueParamDecl *asTemplateValueParamDecl(self)
 */
struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl {
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl __pyx_base;
};


/* "pssparser/pssast.pxd":562
 *     cdef TemplateValueParamDecl mk(pssast_decl.ITemplateValueParamDecl *hndl, bool owned)
 * 
 * cdef class ConstraintBlock(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintBlock *asConstraintBlock(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintBlock {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":570
 *     cpdef bool getIs_dynamic(self)
 * 
 * cdef class ConstraintScope(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintScope *asConstraintScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintScope {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":576
 *     cdef ConstraintScope mk(pssast_decl.IConstraintScope *hndl, bool owned)
 * 
 * cdef class ConstraintStmtDefault(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtDefault *asConstraintStmtDefault(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":582
 *     cdef ConstraintStmtDefault mk(pssast_decl.IConstraintStmtDefault *hndl, bool owned)
 * 
 * cdef class ConstraintStmtDefaultDisable(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtDefaultDisable *asConstraintStmtDefaultDisable(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":588
 *     cdef ConstraintStmtDefaultDisable mk(pssast_decl.IConstraintStmtDefaultDisable *hndl, bool owned)
 * 
 * cdef class ConstraintStmtExpr(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtExpr *asConstraintStmtExpr(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":594
 *     cdef ConstraintStmtExpr mk(pssast_decl.IConstraintStmtExpr *hndl, bool owned)
 * 
 * cdef class ConstraintStmtField(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtField *asConstraintStmtField(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":600
 *     cdef ConstraintStmtField mk(pssast_decl.IConstraintStmtField *hndl, bool owned)
 * 
 * cdef class ConstraintStmtIf(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtIf *asConstraintStmtIf(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":606
 *     cdef ConstraintStmtIf mk(pssast_decl.IConstraintStmtIf *hndl, bool owned)
 * 
 * cdef class ConstraintStmtUnique(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtUnique *asConstraintStmtUnique(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique {
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt __pyx_base;
};


/* "pssparser/pssast.pxd":612
 *     cdef ConstraintStmtUnique mk(pssast_decl.IConstraintStmtUnique *hndl, bool owned)
 * 
 * cdef class GlobalScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IGlobalScope *asGlobalScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_GlobalScope {
  struct __pyx_obj_9pssparser_6pssast_Scope __pyx_base;
};


/* "pssparser/pssast.pxd":619
 *     cpdef int32_t getFileid(self)
 * 
 * cdef class NamedScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.INamedScope *asNamedScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_NamedScope {
  struct __pyx_obj_9pssparser_6pssast_Scope __pyx_base;
};


/* "pssparser/pssast.pxd":625
 *     cdef NamedScope mk(pssast_decl.INamedScope *hndl, bool owned)
 * 
 * cdef class PackageScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IPackageScope *asPackageScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_PackageScope {
  struct __pyx_obj_9pssparser_6pssast_Scope __pyx_base;
};


/* "pssparser/pssast.pxd":631
 *     cdef PackageScope mk(pssast_decl.IPackageScope *hndl, bool owned)
 * 
 * cdef class DataTypeArray(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeArray *asDataTypeArray(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeArray {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":637
 *     cdef DataTypeArray mk(pssast_decl.IDataTypeArray *hndl, bool owned)
 * 
 * cdef class DataTypeBool(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeBool *asDataTypeBool(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeBool {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":643
 *     cdef DataTypeBool mk(pssast_decl.IDataTypeBool *hndl, bool owned)
 * 
 * cdef class DataTypeChandle(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeChandle *asDataTypeChandle(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeChandle {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":649
 *     cdef DataTypeChandle mk(pssast_decl.IDataTypeChandle *hndl, bool owned)
 * 
 * cdef class DataTypeEnum(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeEnum *asDataTypeEnum(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeEnum {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":655
 *     cdef DataTypeEnum mk(pssast_decl.IDataTypeEnum *hndl, bool owned)
 * 
 * cdef class DataTypeInt(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeInt *asDataTypeInt(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeInt {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":662
 *     cpdef bool getIs_signed(self)
 * 
 * cdef class DataTypeString(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeString *asDataTypeString(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeString {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":669
 *     cpdef bool getHas_range(self)
 * 
 * cdef class DataTypeUserDefined(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeUserDefined *asDataTypeUserDefined(self)
 */
struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined {
  struct __pyx_obj_9pssparser_6pssast_DataType __pyx_base;
};


/* "pssparser/pssast.pxd":676
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprRefPathContext(ExprRefPath):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathContext *asExprRefPathContext(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext {
  struct __pyx_obj_9pssparser_6pssast_ExprRefPath __pyx_base;
};


/* "pssparser/pssast.pxd":682
 *     cdef ExprRefPathContext mk(pssast_decl.IExprRefPathContext *hndl, bool owned)
 * 
 * cdef class ExprRefPathStatic(ExprRefPath):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStatic *asExprRefPathStatic(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic {
  struct __pyx_obj_9pssparser_6pssast_ExprRefPath __pyx_base;
};


/* "pssparser/pssast.pxd":689
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprSignedNumber(ExprNumber):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprSignedNumber *asExprSignedNumber(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber {
  struct __pyx_obj_9pssparser_6pssast_ExprNumber __pyx_base;
};


/* "pssparser/pssast.pxd":698
 *     cpdef int64_t getValue(self)
 * 
 * cdef class ExprUnsignedNumber(ExprNumber):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprUnsignedNumber *asExprUnsignedNumber(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber {
  struct __pyx_obj_9pssparser_6pssast_ExprNumber __pyx_base;
};


/* "pssparser/pssast.pxd":707
 *     cpdef uint64_t getValue(self)
 * 
 * cdef class ConstraintStmtForall(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtForall *asConstraintStmtForall(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall {
  struct __pyx_obj_9pssparser_6pssast_ConstraintScope __pyx_base;
};


/* "pssparser/pssast.pxd":713
 *     cdef ConstraintStmtForall mk(pssast_decl.IConstraintStmtForall *hndl, bool owned)
 * 
 * cdef class ConstraintStmtForeach(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtForeach *asConstraintStmtForeach(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach {
  struct __pyx_obj_9pssparser_6pssast_ConstraintScope __pyx_base;
};


/* "pssparser/pssast.pxd":719
 *     cdef ConstraintStmtForeach mk(pssast_decl.IConstraintStmtForeach *hndl, bool owned)
 * 
 * cdef class ConstraintStmtImplication(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtImplication *asConstraintStmtImplication(self)
 */
struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication {
  struct __pyx_obj_9pssparser_6pssast_ConstraintScope __pyx_base;
};


/* "pssparser/pssast.pxd":725
 *     cdef ConstraintStmtImplication mk(pssast_decl.IConstraintStmtImplication *hndl, bool owned)
 * 
 * cdef class TypeScope(NamedScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeScope *asTypeScope(self)
 */
struct __pyx_obj_9pssparser_6pssast_TypeScope {
  struct __pyx_obj_9pssparser_6pssast_NamedScope __pyx_base;
};


/* "pssparser/pssast.pxd":731
 *     cdef TypeScope mk(pssast_decl.ITypeScope *hndl, bool owned)
 * 
 * cdef class ExprRefPathStaticFunc(ExprRefPathStatic):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStaticFunc *asExprRefPathStaticFunc(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc {
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic __pyx_base;
};


/* "pssparser/pssast.pxd":737
 *     cdef ExprRefPathStaticFunc mk(pssast_decl.IExprRefPathStaticFunc *hndl, bool owned)
 * 
 * cdef class ExprRefPathSuper(ExprRefPathContext):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathSuper *asExprRefPathSuper(self)
 */
struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper {
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext __pyx_base;
};


/* "pssparser/pssast.pxd":743
 *     cdef ExprRefPathSuper mk(pssast_decl.IExprRefPathSuper *hndl, bool owned)
 * 
 * cdef class Action(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IAction *asAction(self)
 */
struct __pyx_obj_9pssparser_6pssast_Action {
  struct __pyx_obj_9pssparser_6pssast_TypeScope __pyx_base;
};


/* "pssparser/pssast.pxd":750
 *     cpdef bool getIs_abstract(self)
 * 
 * cdef class Component(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IComponent *asComponent(self)
 */
struct __pyx_obj_9pssparser_6pssast_Component {
  struct __pyx_obj_9pssparser_6pssast_TypeScope __pyx_base;
};


/* "pssparser/pssast.pxd":756
 *     cdef Component mk(pssast_decl.IComponent *hndl, bool owned)
 * 
 * cdef class Struct(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IStruct *asStruct(self)
 */
struct __pyx_obj_9pssparser_6pssast_Struct {
  struct __pyx_obj_9pssparser_6pssast_TypeScope __pyx_base;
};


/* "pssparser/pssast.pxd":762
 *     cdef Struct mk(pssast_decl.IStruct *hndl, bool owned)
 * 
 * cdef class State(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IState *asState(self)
 */
struct __pyx_obj_9pssparser_6pssast_State {
  struct __pyx_obj_9pssparser_6pssast_Struct __pyx_base;
};


/* "pssparser/pssast.pxd":768
 *     cdef State mk(pssast_decl.IState *hndl, bool owned)
 * 
 * cdef class Stream(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IStream *asStream(self)
 */
struct __pyx_obj_9pssparser_6pssast_Stream {
  struct __pyx_obj_9pssparser_6pssast_Struct __pyx_base;
};


/* "pssparser/pssast.pxd":774
 *     cdef Stream mk(pssast_decl.IStream *hndl, bool owned)
 * 
 * cdef class Buffer(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IBuffer *asBuffer(self)
 */
struct __pyx_obj_9pssparser_6pssast_Buffer {
  struct __pyx_obj_9pssparser_6pssast_Struct __pyx_base;
};


/* "pssparser/pssast.pxd":780
 *     cdef Buffer mk(pssast_decl.IBuffer *hndl, bool owned)
 * 
 * cdef class Resource(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IResource *asResource(self)
 */
struct __pyx_obj_9pssparser_6pssast_Resource {
  struct __pyx_obj_9pssparser_6pssast_Struct __pyx_base;
};


/* "pssparser/pssast.pxd":786
 *     cdef Resource mk(pssast_decl.IResource *hndl, bool owned)
 * 
 * cdef class VisitorBase(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.PyBaseVisitor *_hndl
 *     cdef bool                  _owned
 */
struct __pyx_obj_9pssparser_6pssast_VisitorBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_6pssast_VisitorBase *__pyx_vtab;
  pssp::ast::PyBaseVisitor *_hndl;
  bool _owned;
};


/* "pssparser/core.pxd":8
 * cimport ciostream
 * 
 * cdef class Factory(object):             # <<<<<<<<<<<<<<
 *     cdef decl.IFactory      *_hndl
 * 
 */
struct __pyx_obj_9pssparser_4core_Factory {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_4core_Factory *__pyx_vtab;
  pssp::IFactory *_hndl;
};


/* "pssparser/core.pxd":19
 * 
 * 
 * cdef class AstBuilder(object):             # <<<<<<<<<<<<<<
 *     cdef decl.IAstBuilder      *_hndl
 * 
 */
struct __pyx_obj_9pssparser_4core_AstBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pssparser_4core_AstBuilder *__pyx_vtab;
  pssp::IAstBuilder *_hndl;
};


/* "pssparser/core.pxd":31
 * 
 * 
 * cdef class MarkerListener(object):             # <<<<<<<<<<<<<<
 *     cdef decl.IMarkerListener       *_hndl
 */
struct __pyx_obj_9pssparser_4core_MarkerListener {
  PyObject_HEAD
  pssp::IMarkerListener *_hndl;
};



/* "../python/lib/python3.7/site-packages/ciostream/__init__.pxd":38
 *         _costream(cpy_ref.PyObject *)
 * 
 * cdef class cistream(object):             # <<<<<<<<<<<<<<
 *     cdef istream           *_hndl
 *     cdef istream *stream(self)
 */

struct __pyx_vtabstruct_9ciostream_cistream {
  std::istream *(*stream)(struct __pyx_obj_9ciostream_cistream *);
};
static struct __pyx_vtabstruct_9ciostream_cistream *__pyx_vtabptr_9ciostream_cistream;


/* "../python/lib/python3.7/site-packages/ciostream/__init__.pxd":42
 *     cdef istream *stream(self)
 * 
 * cdef class costream(object):             # <<<<<<<<<<<<<<
 *     cdef ostream           *_hndl
 *     cdef ostream *stream(self)
 */

struct __pyx_vtabstruct_9ciostream_costream {
  std::ostream *(*stream)(struct __pyx_obj_9ciostream_costream *);
};
static struct __pyx_vtabstruct_9ciostream_costream *__pyx_vtabptr_9ciostream_costream;


/* "pssparser/pssast.pxd":23
 * 
 * from pssparser cimport pssast_decl
 * cdef class Factory(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IFactory *_hndl
 *     cpdef ExecStmt mkExecStmt(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Factory {
  struct __pyx_obj_9pssparser_6pssast_ExecStmt *(*mkExecStmt)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Expr *(*mkExpr)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_RefExpr *(*mkRefExpr)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList *(*mkTemplateParamDeclList)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl *(*mkTemplateParamDecl)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ScopeChild *(*mkScopeChild)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList *(*mkTemplateParamValueList)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamValue *(*mkTemplateParamValue)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue *(*mkTemplateParamTypeValue)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue *(*mkTemplateParamExprValue)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt *(*mkConstraintStmt)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Scope *(*mkScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_NamedScopeChild *(*mkNamedScopeChild)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_PackageImportStmt *(*mkPackageImportStmt)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataType *(*mkDataType)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExecScope *(*mkExecScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration *(*mkProceduralStmtDataDeclaration)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_DataType *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprBin *(*mkExprBin)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, PyObject *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprBitSlice *(*mkExprBitSlice)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprBool *(*mkExprBool)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprCast *(*mkExprCast)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprCompileHas *(*mkExprCompileHas)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprCond *(*mkExprCond)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList *(*mkExprDomainOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue *(*mkExprDomainOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *(*mkExprHierarchicalId)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprId *(*mkExprId)(struct __pyx_obj_9pssparser_6pssast_Factory *, std::string, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprIn *(*mkExprIn)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *(*mkExprMemberPathElem)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_MethodParameterList *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprNumber *(*mkExprNumber)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral *(*mkExprAggregateLiteral)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *(*mkExprOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue *(*mkExprOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPath *(*mkExprRefPath)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem *(*mkExprRefPathElem)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted *(*mkExprRefPathStaticRooted)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath *(*mkExprStaticRefPath)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprString *(*mkExprString)(struct __pyx_obj_9pssparser_6pssast_Factory *, std::string, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprSubscript *(*mkExprSubscript)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprUnary *(*mkExprUnary)(struct __pyx_obj_9pssparser_6pssast_Factory *, PyObject *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_MethodParameterList *(*mkMethodParameterList)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *(*mkTypeIdentifier)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem *(*mkTypeIdentifierElem)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal *(*mkRefExprTypeScopeGlobal)(struct __pyx_obj_9pssparser_6pssast_Factory *, __pyx_t_9pssparser_6pssast_int32_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext *(*mkRefExprTypeScopeContext)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_RefExpr *, __pyx_t_9pssparser_6pssast_int32_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex *(*mkRefExprScopeIndex)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_RefExpr *, __pyx_t_9pssparser_6pssast_int32_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl *(*mkTemplateGenericTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl *(*mkTemplateCategoryTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, PyObject *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl *(*mkTemplateValueParamDecl)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *(*mkConstraintBlock)(struct __pyx_obj_9pssparser_6pssast_Factory *, std::string, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintScope *(*mkConstraintScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault *(*mkConstraintStmtDefault)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable *(*mkConstraintStmtDefaultDisable)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr *(*mkConstraintStmtExpr)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField *(*mkConstraintStmtField)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_DataType *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf *(*mkConstraintStmtIf)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_ConstraintScope *, struct __pyx_obj_9pssparser_6pssast_ConstraintScope *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique *(*mkConstraintStmtUnique)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_GlobalScope *(*mkGlobalScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, __pyx_t_9pssparser_6pssast_int32_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_NamedScope *(*mkNamedScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_PackageScope *(*mkPackageScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeArray *(*mkDataTypeArray)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_DataType *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeBool *(*mkDataTypeBool)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeChandle *(*mkDataTypeChandle)(struct __pyx_obj_9pssparser_6pssast_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeEnum *(*mkDataTypeEnum)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *, struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeInt *(*mkDataTypeInt)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeString *(*mkDataTypeString)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *(*mkDataTypeUserDefined)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext *(*mkExprRefPathContext)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *(*mkExprRefPathStatic)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *(*mkExprSignedNumber)(struct __pyx_obj_9pssparser_6pssast_Factory *, std::string, __pyx_t_9pssparser_6pssast_uint32_t, __pyx_t_9pssparser_6pssast_int64_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *(*mkExprUnsignedNumber)(struct __pyx_obj_9pssparser_6pssast_Factory *, std::string, __pyx_t_9pssparser_6pssast_uint32_t, __pyx_t_9pssparser_6pssast_uint64_t, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall *(*mkConstraintStmtForall)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *, struct __pyx_obj_9pssparser_6pssast_ExprRefPath *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach *(*mkConstraintStmtForeach)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication *(*mkConstraintStmtImplication)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_TypeScope *(*mkTypeScope)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc *(*mkExprRefPathStaticFunc)(struct __pyx_obj_9pssparser_6pssast_Factory *, bool, struct __pyx_obj_9pssparser_6pssast_MethodParameterList *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper *(*mkExprRefPathSuper)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Action *(*mkAction)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, bool, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Component *(*mkComponent)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Struct *(*mkStruct)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_State *(*mkState)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Stream *(*mkStream)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Buffer *(*mkBuffer)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_6pssast_Resource *(*mkResource)(struct __pyx_obj_9pssparser_6pssast_Factory *, struct __pyx_obj_9pssparser_6pssast_ExprId *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  PyObject *(*mk)(pssp::ast::IFactory *);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Factory *__pyx_vtabptr_9pssparser_6pssast_Factory;


/* "pssparser/pssast.pxd":224
 *     @staticmethod
 *     cdef mk(pssast_decl.IFactory *hndl)
 * cdef class ExecStmt(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IExecStmt    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_ExecStmt *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::IExecStmt *(*asExecStmt)(struct __pyx_obj_9pssparser_6pssast_ExecStmt *);
  struct __pyx_obj_9pssparser_6pssast_ExecStmt *(*mk)(pssp::ast::IExecStmt *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt *__pyx_vtabptr_9pssparser_6pssast_ExecStmt;


/* "pssparser/pssast.pxd":233
 *     cdef ExecStmt mk(pssast_decl.IExecStmt *hndl, bool owned)
 * 
 * cdef class Expr(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IExpr    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Expr {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_Expr *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::IExpr *(*asExpr)(struct __pyx_obj_9pssparser_6pssast_Expr *);
  struct __pyx_obj_9pssparser_6pssast_Expr *(*mk)(pssp::ast::IExpr *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Expr *__pyx_vtabptr_9pssparser_6pssast_Expr;


/* "pssparser/pssast.pxd":242
 *     cdef Expr mk(pssast_decl.IExpr *hndl, bool owned)
 * 
 * cdef class RefExpr(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IRefExpr    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_RefExpr *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::IRefExpr *(*asRefExpr)(struct __pyx_obj_9pssparser_6pssast_RefExpr *);
  struct __pyx_obj_9pssparser_6pssast_RefExpr *(*mk)(pssp::ast::IRefExpr *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr *__pyx_vtabptr_9pssparser_6pssast_RefExpr;


/* "pssparser/pssast.pxd":251
 *     cdef RefExpr mk(pssast_decl.IRefExpr *hndl, bool owned)
 * 
 * cdef class TemplateParamDeclList(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamDeclList    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDeclList {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamDeclList *(*asTemplateParamDeclList)(struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList *(*mk)(pssp::ast::ITemplateParamDeclList *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDeclList *__pyx_vtabptr_9pssparser_6pssast_TemplateParamDeclList;


/* "pssparser/pssast.pxd":260
 *     cdef TemplateParamDeclList mk(pssast_decl.ITemplateParamDeclList *hndl, bool owned)
 * 
 * cdef class TemplateParamDecl(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamDecl    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamDecl *(*asTemplateParamDecl)(struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl *(*mk)(pssp::ast::ITemplateParamDecl *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl *__pyx_vtabptr_9pssparser_6pssast_TemplateParamDecl;


/* "pssparser/pssast.pxd":269
 *     cdef TemplateParamDecl mk(pssast_decl.ITemplateParamDecl *hndl, bool owned)
 * 
 * cdef class ScopeChild(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.IScopeChild    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_ScopeChild *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::IScopeChild *(*asScopeChild)(struct __pyx_obj_9pssparser_6pssast_ScopeChild *);
  struct __pyx_obj_9pssparser_6pssast_ScopeChild *(*mk)(pssp::ast::IScopeChild *, bool);
  std::string (*getDocstring)(struct __pyx_obj_9pssparser_6pssast_ScopeChild *, int __pyx_skip_dispatch);
  __pyx_t_9pssparser_6pssast_int32_t (*getIndex)(struct __pyx_obj_9pssparser_6pssast_ScopeChild *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild *__pyx_vtabptr_9pssparser_6pssast_ScopeChild;


/* "pssparser/pssast.pxd":280
 *     cpdef int32_t getIndex(self)
 * 
 * cdef class TemplateParamValueList(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamValueList    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValueList {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamValueList *(*asTemplateParamValueList)(struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList *(*mk)(pssp::ast::ITemplateParamValueList *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValueList *__pyx_vtabptr_9pssparser_6pssast_TemplateParamValueList;


/* "pssparser/pssast.pxd":289
 *     cdef TemplateParamValueList mk(pssast_decl.ITemplateParamValueList *hndl, bool owned)
 * 
 * cdef class TemplateParamValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamValue    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValue {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamValue *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamValue *(*asTemplateParamValue)(struct __pyx_obj_9pssparser_6pssast_TemplateParamValue *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamValue *(*mk)(pssp::ast::ITemplateParamValue *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValue *__pyx_vtabptr_9pssparser_6pssast_TemplateParamValue;


/* "pssparser/pssast.pxd":298
 *     cdef TemplateParamValue mk(pssast_decl.ITemplateParamValue *hndl, bool owned)
 * 
 * cdef class TemplateParamTypeValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamTypeValue    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamTypeValue {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamTypeValue *(*asTemplateParamTypeValue)(struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue *(*mk)(pssp::ast::ITemplateParamTypeValue *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamTypeValue *__pyx_vtabptr_9pssparser_6pssast_TemplateParamTypeValue;


/* "pssparser/pssast.pxd":307
 *     cdef TemplateParamTypeValue mk(pssast_decl.ITemplateParamTypeValue *hndl, bool owned)
 * 
 * cdef class TemplateParamExprValue(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.ITemplateParamExprValue    *_hndl
 *     cdef bool           _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamExprValue {
  void (*accept)(struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue *, struct __pyx_obj_9pssparser_6pssast_VisitorBase *, int __pyx_skip_dispatch);
  pssp::ast::ITemplateParamExprValue *(*asTemplateParamExprValue)(struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue *);
  struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue *(*mk)(pssp::ast::ITemplateParamExprValue *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamExprValue *__pyx_vtabptr_9pssparser_6pssast_TemplateParamExprValue;


/* "pssparser/pssast.pxd":316
 *     cdef TemplateParamExprValue mk(pssast_decl.ITemplateParamExprValue *hndl, bool owned)
 * 
 * cdef class ConstraintStmt(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmt *asConstraintStmt(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt {
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild __pyx_base;
  pssp::ast::IConstraintStmt *(*asConstraintStmt)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmt *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmt *(*mk)(pssp::ast::IConstraintStmt *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmt;


/* "pssparser/pssast.pxd":322
 *     cdef ConstraintStmt mk(pssast_decl.IConstraintStmt *hndl, bool owned)
 * 
 * cdef class Scope(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IScope *asScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Scope {
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild __pyx_base;
  pssp::ast::IScope *(*asScope)(struct __pyx_obj_9pssparser_6pssast_Scope *);
  struct __pyx_obj_9pssparser_6pssast_Scope *(*mk)(pssp::ast::IScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Scope *__pyx_vtabptr_9pssparser_6pssast_Scope;


/* "pssparser/pssast.pxd":328
 *     cdef Scope mk(pssast_decl.IScope *hndl, bool owned)
 * 
 * cdef class NamedScopeChild(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.INamedScopeChild *asNamedScopeChild(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_NamedScopeChild {
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild __pyx_base;
  pssp::ast::INamedScopeChild *(*asNamedScopeChild)(struct __pyx_obj_9pssparser_6pssast_NamedScopeChild *);
  struct __pyx_obj_9pssparser_6pssast_NamedScopeChild *(*mk)(pssp::ast::INamedScopeChild *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_NamedScopeChild *__pyx_vtabptr_9pssparser_6pssast_NamedScopeChild;


/* "pssparser/pssast.pxd":334
 *     cdef NamedScopeChild mk(pssast_decl.INamedScopeChild *hndl, bool owned)
 * 
 * cdef class PackageImportStmt(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IPackageImportStmt *asPackageImportStmt(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_PackageImportStmt {
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild __pyx_base;
  pssp::ast::IPackageImportStmt *(*asPackageImportStmt)(struct __pyx_obj_9pssparser_6pssast_PackageImportStmt *);
  struct __pyx_obj_9pssparser_6pssast_PackageImportStmt *(*mk)(pssp::ast::IPackageImportStmt *, bool);
  bool (*getWildcard)(struct __pyx_obj_9pssparser_6pssast_PackageImportStmt *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_PackageImportStmt *__pyx_vtabptr_9pssparser_6pssast_PackageImportStmt;


/* "pssparser/pssast.pxd":341
 *     cpdef bool getWildcard(self)
 * 
 * cdef class DataType(ScopeChild):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataType *asDataType(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataType {
  struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild __pyx_base;
  pssp::ast::IDataType *(*asDataType)(struct __pyx_obj_9pssparser_6pssast_DataType *);
  struct __pyx_obj_9pssparser_6pssast_DataType *(*mk)(pssp::ast::IDataType *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataType *__pyx_vtabptr_9pssparser_6pssast_DataType;


/* "pssparser/pssast.pxd":347
 *     cdef DataType mk(pssast_decl.IDataType *hndl, bool owned)
 * 
 * cdef class ExecScope(ExecStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExecScope *asExecScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExecScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt __pyx_base;
  pssp::ast::IExecScope *(*asExecScope)(struct __pyx_obj_9pssparser_6pssast_ExecScope *);
  struct __pyx_obj_9pssparser_6pssast_ExecScope *(*mk)(pssp::ast::IExecScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExecScope *__pyx_vtabptr_9pssparser_6pssast_ExecScope;


/* "pssparser/pssast.pxd":353
 *     cdef ExecScope mk(pssast_decl.IExecScope *hndl, bool owned)
 * 
 * cdef class ProceduralStmtDataDeclaration(ExecStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IProceduralStmtDataDeclaration *asProceduralStmtDataDeclaration(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ProceduralStmtDataDeclaration {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt __pyx_base;
  pssp::ast::IProceduralStmtDataDeclaration *(*asProceduralStmtDataDeclaration)(struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration *);
  struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration *(*mk)(pssp::ast::IProceduralStmtDataDeclaration *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ProceduralStmtDataDeclaration *__pyx_vtabptr_9pssparser_6pssast_ProceduralStmtDataDeclaration;


/* "pssparser/pssast.pxd":359
 *     cdef ProceduralStmtDataDeclaration mk(pssast_decl.IProceduralStmtDataDeclaration *hndl, bool owned)
 * 
 * cdef class ExprBin(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBin *asExprBin(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprBin {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprBin *(*asExprBin)(struct __pyx_obj_9pssparser_6pssast_ExprBin *);
  struct __pyx_obj_9pssparser_6pssast_ExprBin *(*mk)(pssp::ast::IExprBin *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprBin *__pyx_vtabptr_9pssparser_6pssast_ExprBin;


/* "pssparser/pssast.pxd":365
 *     cdef ExprBin mk(pssast_decl.IExprBin *hndl, bool owned)
 * 
 * cdef class ExprBitSlice(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBitSlice *asExprBitSlice(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprBitSlice {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprBitSlice *(*asExprBitSlice)(struct __pyx_obj_9pssparser_6pssast_ExprBitSlice *);
  struct __pyx_obj_9pssparser_6pssast_ExprBitSlice *(*mk)(pssp::ast::IExprBitSlice *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprBitSlice *__pyx_vtabptr_9pssparser_6pssast_ExprBitSlice;


/* "pssparser/pssast.pxd":371
 *     cdef ExprBitSlice mk(pssast_decl.IExprBitSlice *hndl, bool owned)
 * 
 * cdef class ExprBool(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprBool *asExprBool(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprBool {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprBool *(*asExprBool)(struct __pyx_obj_9pssparser_6pssast_ExprBool *);
  struct __pyx_obj_9pssparser_6pssast_ExprBool *(*mk)(pssp::ast::IExprBool *, bool);
  bool (*getValue)(struct __pyx_obj_9pssparser_6pssast_ExprBool *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprBool *__pyx_vtabptr_9pssparser_6pssast_ExprBool;


/* "pssparser/pssast.pxd":378
 *     cpdef bool getValue(self)
 * 
 * cdef class ExprCast(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCast *asExprCast(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprCast {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprCast *(*asExprCast)(struct __pyx_obj_9pssparser_6pssast_ExprCast *);
  struct __pyx_obj_9pssparser_6pssast_ExprCast *(*mk)(pssp::ast::IExprCast *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprCast *__pyx_vtabptr_9pssparser_6pssast_ExprCast;


/* "pssparser/pssast.pxd":384
 *     cdef ExprCast mk(pssast_decl.IExprCast *hndl, bool owned)
 * 
 * cdef class ExprCompileHas(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCompileHas *asExprCompileHas(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprCompileHas {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprCompileHas *(*asExprCompileHas)(struct __pyx_obj_9pssparser_6pssast_ExprCompileHas *);
  struct __pyx_obj_9pssparser_6pssast_ExprCompileHas *(*mk)(pssp::ast::IExprCompileHas *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprCompileHas *__pyx_vtabptr_9pssparser_6pssast_ExprCompileHas;


/* "pssparser/pssast.pxd":390
 *     cdef ExprCompileHas mk(pssast_decl.IExprCompileHas *hndl, bool owned)
 * 
 * cdef class ExprCond(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprCond *asExprCond(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprCond {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprCond *(*asExprCond)(struct __pyx_obj_9pssparser_6pssast_ExprCond *);
  struct __pyx_obj_9pssparser_6pssast_ExprCond *(*mk)(pssp::ast::IExprCond *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprCond *__pyx_vtabptr_9pssparser_6pssast_ExprCond;


/* "pssparser/pssast.pxd":396
 *     cdef ExprCond mk(pssast_decl.IExprCond *hndl, bool owned)
 * 
 * cdef class ExprDomainOpenRangeList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprDomainOpenRangeList *asExprDomainOpenRangeList(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeList {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprDomainOpenRangeList *(*asExprDomainOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList *);
  struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList *(*mk)(pssp::ast::IExprDomainOpenRangeList *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeList *__pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeList;


/* "pssparser/pssast.pxd":402
 *     cdef ExprDomainOpenRangeList mk(pssast_decl.IExprDomainOpenRangeList *hndl, bool owned)
 * 
 * cdef class ExprDomainOpenRangeValue(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprDomainOpenRangeValue *asExprDomainOpenRangeValue(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeValue {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprDomainOpenRangeValue *(*asExprDomainOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue *);
  struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue *(*mk)(pssp::ast::IExprDomainOpenRangeValue *, bool);
  bool (*getSingle)(struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeValue *__pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeValue;


/* "pssparser/pssast.pxd":409
 *     cpdef bool getSingle(self)
 * 
 * cdef class ExprHierarchicalId(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprHierarchicalId *asExprHierarchicalId(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprHierarchicalId {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprHierarchicalId *(*asExprHierarchicalId)(struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *);
  struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *(*mk)(pssp::ast::IExprHierarchicalId *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprHierarchicalId *__pyx_vtabptr_9pssparser_6pssast_ExprHierarchicalId;


/* "pssparser/pssast.pxd":415
 *     cdef ExprHierarchicalId mk(pssast_decl.IExprHierarchicalId *hndl, bool owned)
 * 
 * cdef class ExprId(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprId *asExprId(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprId {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprId *(*asExprId)(struct __pyx_obj_9pssparser_6pssast_ExprId *);
  struct __pyx_obj_9pssparser_6pssast_ExprId *(*mk)(pssp::ast::IExprId *, bool);
  std::string (*getId)(struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  bool (*getIs_escaped)(struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprId *__pyx_vtabptr_9pssparser_6pssast_ExprId;


/* "pssparser/pssast.pxd":423
 *     cpdef bool getIs_escaped(self)
 * 
 * cdef class ExprIn(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprIn *asExprIn(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprIn {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprIn *(*asExprIn)(struct __pyx_obj_9pssparser_6pssast_ExprIn *);
  struct __pyx_obj_9pssparser_6pssast_ExprIn *(*mk)(pssp::ast::IExprIn *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprIn *__pyx_vtabptr_9pssparser_6pssast_ExprIn;


/* "pssparser/pssast.pxd":429
 *     cdef ExprIn mk(pssast_decl.IExprIn *hndl, bool owned)
 * 
 * cdef class ExprMemberPathElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprMemberPathElem *asExprMemberPathElem(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprMemberPathElem {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprMemberPathElem *(*asExprMemberPathElem)(struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *);
  struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *(*mk)(pssp::ast::IExprMemberPathElem *, bool);
  __pyx_t_9pssparser_6pssast_int32_t (*getTarget)(struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprMemberPathElem *__pyx_vtabptr_9pssparser_6pssast_ExprMemberPathElem;


/* "pssparser/pssast.pxd":436
 *     cpdef int32_t getTarget(self)
 * 
 * cdef class ExprNumber(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprNumber *asExprNumber(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprNumber {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprNumber *(*asExprNumber)(struct __pyx_obj_9pssparser_6pssast_ExprNumber *);
  struct __pyx_obj_9pssparser_6pssast_ExprNumber *(*mk)(pssp::ast::IExprNumber *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprNumber *__pyx_vtabptr_9pssparser_6pssast_ExprNumber;


/* "pssparser/pssast.pxd":442
 *     cdef ExprNumber mk(pssast_decl.IExprNumber *hndl, bool owned)
 * 
 * cdef class ExprAggregateLiteral(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprAggregateLiteral *asExprAggregateLiteral(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprAggregateLiteral {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprAggregateLiteral *(*asExprAggregateLiteral)(struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral *);
  struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral *(*mk)(pssp::ast::IExprAggregateLiteral *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprAggregateLiteral *__pyx_vtabptr_9pssparser_6pssast_ExprAggregateLiteral;


/* "pssparser/pssast.pxd":448
 *     cdef ExprAggregateLiteral mk(pssast_decl.IExprAggregateLiteral *hndl, bool owned)
 * 
 * cdef class ExprOpenRangeList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprOpenRangeList *asExprOpenRangeList(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeList {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprOpenRangeList *(*asExprOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *);
  struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *(*mk)(pssp::ast::IExprOpenRangeList *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeList *__pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeList;


/* "pssparser/pssast.pxd":454
 *     cdef ExprOpenRangeList mk(pssast_decl.IExprOpenRangeList *hndl, bool owned)
 * 
 * cdef class ExprOpenRangeValue(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprOpenRangeValue *asExprOpenRangeValue(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeValue {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprOpenRangeValue *(*asExprOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue *);
  struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue *(*mk)(pssp::ast::IExprOpenRangeValue *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeValue *__pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeValue;


/* "pssparser/pssast.pxd":460
 *     cdef ExprOpenRangeValue mk(pssast_decl.IExprOpenRangeValue *hndl, bool owned)
 * 
 * cdef class ExprRefPath(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPath *asExprRefPath(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPath {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprRefPath *(*asExprRefPath)(struct __pyx_obj_9pssparser_6pssast_ExprRefPath *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPath *(*mk)(pssp::ast::IExprRefPath *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPath *__pyx_vtabptr_9pssparser_6pssast_ExprRefPath;


/* "pssparser/pssast.pxd":466
 *     cdef ExprRefPath mk(pssast_decl.IExprRefPath *hndl, bool owned)
 * 
 * cdef class ExprRefPathElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathElem *asExprRefPathElem(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathElem {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprRefPathElem *(*asExprRefPathElem)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem *(*mk)(pssp::ast::IExprRefPathElem *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathElem *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathElem;


/* "pssparser/pssast.pxd":472
 *     cdef ExprRefPathElem mk(pssast_decl.IExprRefPathElem *hndl, bool owned)
 * 
 * cdef class ExprRefPathStaticRooted(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStaticRooted *asExprRefPathStaticRooted(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticRooted {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprRefPathStaticRooted *(*asExprRefPathStaticRooted)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted *(*mk)(pssp::ast::IExprRefPathStaticRooted *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticRooted *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticRooted;


/* "pssparser/pssast.pxd":478
 *     cdef ExprRefPathStaticRooted mk(pssast_decl.IExprRefPathStaticRooted *hndl, bool owned)
 * 
 * cdef class ExprStaticRefPath(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprStaticRefPath *asExprStaticRefPath(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprStaticRefPath {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprStaticRefPath *(*asExprStaticRefPath)(struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath *);
  struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath *(*mk)(pssp::ast::IExprStaticRefPath *, bool);
  bool (*getIs_global)(struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprStaticRefPath *__pyx_vtabptr_9pssparser_6pssast_ExprStaticRefPath;


/* "pssparser/pssast.pxd":485
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprString(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprString *asExprString(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprString {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprString *(*asExprString)(struct __pyx_obj_9pssparser_6pssast_ExprString *);
  struct __pyx_obj_9pssparser_6pssast_ExprString *(*mk)(pssp::ast::IExprString *, bool);
  std::string (*getValue)(struct __pyx_obj_9pssparser_6pssast_ExprString *, int __pyx_skip_dispatch);
  bool (*getIs_raw)(struct __pyx_obj_9pssparser_6pssast_ExprString *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprString *__pyx_vtabptr_9pssparser_6pssast_ExprString;


/* "pssparser/pssast.pxd":493
 *     cpdef bool getIs_raw(self)
 * 
 * cdef class ExprSubscript(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprSubscript *asExprSubscript(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprSubscript {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprSubscript *(*asExprSubscript)(struct __pyx_obj_9pssparser_6pssast_ExprSubscript *);
  struct __pyx_obj_9pssparser_6pssast_ExprSubscript *(*mk)(pssp::ast::IExprSubscript *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprSubscript *__pyx_vtabptr_9pssparser_6pssast_ExprSubscript;


/* "pssparser/pssast.pxd":499
 *     cdef ExprSubscript mk(pssast_decl.IExprSubscript *hndl, bool owned)
 * 
 * cdef class ExprUnary(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprUnary *asExprUnary(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnary {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IExprUnary *(*asExprUnary)(struct __pyx_obj_9pssparser_6pssast_ExprUnary *);
  struct __pyx_obj_9pssparser_6pssast_ExprUnary *(*mk)(pssp::ast::IExprUnary *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnary *__pyx_vtabptr_9pssparser_6pssast_ExprUnary;


/* "pssparser/pssast.pxd":505
 *     cdef ExprUnary mk(pssast_decl.IExprUnary *hndl, bool owned)
 * 
 * cdef class MethodParameterList(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IMethodParameterList *asMethodParameterList(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_MethodParameterList {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::IMethodParameterList *(*asMethodParameterList)(struct __pyx_obj_9pssparser_6pssast_MethodParameterList *);
  struct __pyx_obj_9pssparser_6pssast_MethodParameterList *(*mk)(pssp::ast::IMethodParameterList *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_MethodParameterList *__pyx_vtabptr_9pssparser_6pssast_MethodParameterList;


/* "pssparser/pssast.pxd":511
 *     cdef MethodParameterList mk(pssast_decl.IMethodParameterList *hndl, bool owned)
 * 
 * cdef class TypeIdentifier(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeIdentifier *asTypeIdentifier(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifier {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::ITypeIdentifier *(*asTypeIdentifier)(struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *);
  struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *(*mk)(pssp::ast::ITypeIdentifier *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifier *__pyx_vtabptr_9pssparser_6pssast_TypeIdentifier;


/* "pssparser/pssast.pxd":517
 *     cdef TypeIdentifier mk(pssast_decl.ITypeIdentifier *hndl, bool owned)
 * 
 * cdef class TypeIdentifierElem(Expr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeIdentifierElem *asTypeIdentifierElem(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifierElem {
  struct __pyx_vtabstruct_9pssparser_6pssast_Expr __pyx_base;
  pssp::ast::ITypeIdentifierElem *(*asTypeIdentifierElem)(struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem *);
  struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem *(*mk)(pssp::ast::ITypeIdentifierElem *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifierElem *__pyx_vtabptr_9pssparser_6pssast_TypeIdentifierElem;


/* "pssparser/pssast.pxd":523
 *     cdef TypeIdentifierElem mk(pssast_decl.ITypeIdentifierElem *hndl, bool owned)
 * 
 * cdef class RefExprTypeScopeGlobal(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprTypeScopeGlobal *asRefExprTypeScopeGlobal(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeGlobal {
  struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr __pyx_base;
  pssp::ast::IRefExprTypeScopeGlobal *(*asRefExprTypeScopeGlobal)(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal *);
  struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal *(*mk)(pssp::ast::IRefExprTypeScopeGlobal *, bool);
  __pyx_t_9pssparser_6pssast_int32_t (*getFileid)(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeGlobal *__pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeGlobal;


/* "pssparser/pssast.pxd":530
 *     cpdef int32_t getFileid(self)
 * 
 * cdef class RefExprTypeScopeContext(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprTypeScopeContext *asRefExprTypeScopeContext(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeContext {
  struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr __pyx_base;
  pssp::ast::IRefExprTypeScopeContext *(*asRefExprTypeScopeContext)(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext *);
  struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext *(*mk)(pssp::ast::IRefExprTypeScopeContext *, bool);
  __pyx_t_9pssparser_6pssast_int32_t (*getOffset)(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeContext *__pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeContext;


/* "pssparser/pssast.pxd":537
 *     cpdef int32_t getOffset(self)
 * 
 * cdef class RefExprScopeIndex(RefExpr):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IRefExprScopeIndex *asRefExprScopeIndex(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_RefExprScopeIndex {
  struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr __pyx_base;
  pssp::ast::IRefExprScopeIndex *(*asRefExprScopeIndex)(struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex *);
  struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex *(*mk)(pssp::ast::IRefExprScopeIndex *, bool);
  __pyx_t_9pssparser_6pssast_int32_t (*getOffset)(struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_RefExprScopeIndex *__pyx_vtabptr_9pssparser_6pssast_RefExprScopeIndex;


/* "pssparser/pssast.pxd":544
 *     cpdef int32_t getOffset(self)
 * 
 * cdef class TemplateGenericTypeParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateGenericTypeParamDecl *asTemplateGenericTypeParamDecl(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateGenericTypeParamDecl {
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl __pyx_base;
  pssp::ast::ITemplateGenericTypeParamDecl *(*asTemplateGenericTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl *);
  struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl *(*mk)(pssp::ast::ITemplateGenericTypeParamDecl *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateGenericTypeParamDecl *__pyx_vtabptr_9pssparser_6pssast_TemplateGenericTypeParamDecl;


/* "pssparser/pssast.pxd":550
 *     cdef TemplateGenericTypeParamDecl mk(pssast_decl.ITemplateGenericTypeParamDecl *hndl, bool owned)
 * 
 * cdef class TemplateCategoryTypeParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateCategoryTypeParamDecl *asTemplateCategoryTypeParamDecl(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateCategoryTypeParamDecl {
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl __pyx_base;
  pssp::ast::ITemplateCategoryTypeParamDecl *(*asTemplateCategoryTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl *);
  struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl *(*mk)(pssp::ast::ITemplateCategoryTypeParamDecl *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateCategoryTypeParamDecl *__pyx_vtabptr_9pssparser_6pssast_TemplateCategoryTypeParamDecl;


/* "pssparser/pssast.pxd":556
 *     cdef TemplateCategoryTypeParamDecl mk(pssast_decl.ITemplateCategoryTypeParamDecl *hndl, bool owned)
 * 
 * cdef class TemplateValueParamDecl(TemplateParamDecl):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITemplateValueParamDecl *asTemplateValueParamDecl(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TemplateValueParamDecl {
  struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl __pyx_base;
  pssp::ast::ITemplateValueParamDecl *(*asTemplateValueParamDecl)(struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl *);
  struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl *(*mk)(pssp::ast::ITemplateValueParamDecl *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TemplateValueParamDecl *__pyx_vtabptr_9pssparser_6pssast_TemplateValueParamDecl;


/* "pssparser/pssast.pxd":562
 *     cdef TemplateValueParamDecl mk(pssast_decl.ITemplateValueParamDecl *hndl, bool owned)
 * 
 * cdef class ConstraintBlock(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintBlock *asConstraintBlock(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintBlock {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintBlock *(*asConstraintBlock)(struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *(*mk)(pssp::ast::IConstraintBlock *, bool);
  std::string (*getName)(struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *, int __pyx_skip_dispatch);
  bool (*getIs_dynamic)(struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintBlock *__pyx_vtabptr_9pssparser_6pssast_ConstraintBlock;


/* "pssparser/pssast.pxd":570
 *     cpdef bool getIs_dynamic(self)
 * 
 * cdef class ConstraintScope(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintScope *asConstraintScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintScope *(*asConstraintScope)(struct __pyx_obj_9pssparser_6pssast_ConstraintScope *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintScope *(*mk)(pssp::ast::IConstraintScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope *__pyx_vtabptr_9pssparser_6pssast_ConstraintScope;


/* "pssparser/pssast.pxd":576
 *     cdef ConstraintScope mk(pssast_decl.IConstraintScope *hndl, bool owned)
 * 
 * cdef class ConstraintStmtDefault(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtDefault *asConstraintStmtDefault(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefault {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtDefault *(*asConstraintStmtDefault)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault *(*mk)(pssp::ast::IConstraintStmtDefault *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefault *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefault;


/* "pssparser/pssast.pxd":582
 *     cdef ConstraintStmtDefault mk(pssast_decl.IConstraintStmtDefault *hndl, bool owned)
 * 
 * cdef class ConstraintStmtDefaultDisable(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtDefaultDisable *asConstraintStmtDefaultDisable(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefaultDisable {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtDefaultDisable *(*asConstraintStmtDefaultDisable)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable *(*mk)(pssp::ast::IConstraintStmtDefaultDisable *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefaultDisable *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefaultDisable;


/* "pssparser/pssast.pxd":588
 *     cdef ConstraintStmtDefaultDisable mk(pssast_decl.IConstraintStmtDefaultDisable *hndl, bool owned)
 * 
 * cdef class ConstraintStmtExpr(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtExpr *asConstraintStmtExpr(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtExpr {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtExpr *(*asConstraintStmtExpr)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr *(*mk)(pssp::ast::IConstraintStmtExpr *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtExpr *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtExpr;


/* "pssparser/pssast.pxd":594
 *     cdef ConstraintStmtExpr mk(pssast_decl.IConstraintStmtExpr *hndl, bool owned)
 * 
 * cdef class ConstraintStmtField(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtField *asConstraintStmtField(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtField {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtField *(*asConstraintStmtField)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField *(*mk)(pssp::ast::IConstraintStmtField *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtField *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtField;


/* "pssparser/pssast.pxd":600
 *     cdef ConstraintStmtField mk(pssast_decl.IConstraintStmtField *hndl, bool owned)
 * 
 * cdef class ConstraintStmtIf(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtIf *asConstraintStmtIf(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtIf {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtIf *(*asConstraintStmtIf)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf *(*mk)(pssp::ast::IConstraintStmtIf *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtIf *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtIf;


/* "pssparser/pssast.pxd":606
 *     cdef ConstraintStmtIf mk(pssast_decl.IConstraintStmtIf *hndl, bool owned)
 * 
 * cdef class ConstraintStmtUnique(ConstraintStmt):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtUnique *asConstraintStmtUnique(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtUnique {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt __pyx_base;
  pssp::ast::IConstraintStmtUnique *(*asConstraintStmtUnique)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique *(*mk)(pssp::ast::IConstraintStmtUnique *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtUnique *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtUnique;


/* "pssparser/pssast.pxd":612
 *     cdef ConstraintStmtUnique mk(pssast_decl.IConstraintStmtUnique *hndl, bool owned)
 * 
 * cdef class GlobalScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IGlobalScope *asGlobalScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_GlobalScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_Scope __pyx_base;
  pssp::ast::IGlobalScope *(*asGlobalScope)(struct __pyx_obj_9pssparser_6pssast_GlobalScope *);
  struct __pyx_obj_9pssparser_6pssast_GlobalScope *(*mk)(pssp::ast::IGlobalScope *, bool);
  __pyx_t_9pssparser_6pssast_int32_t (*getFileid)(struct __pyx_obj_9pssparser_6pssast_GlobalScope *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_GlobalScope *__pyx_vtabptr_9pssparser_6pssast_GlobalScope;


/* "pssparser/pssast.pxd":619
 *     cpdef int32_t getFileid(self)
 * 
 * cdef class NamedScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.INamedScope *asNamedScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_NamedScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_Scope __pyx_base;
  pssp::ast::INamedScope *(*asNamedScope)(struct __pyx_obj_9pssparser_6pssast_NamedScope *);
  struct __pyx_obj_9pssparser_6pssast_NamedScope *(*mk)(pssp::ast::INamedScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_NamedScope *__pyx_vtabptr_9pssparser_6pssast_NamedScope;


/* "pssparser/pssast.pxd":625
 *     cdef NamedScope mk(pssast_decl.INamedScope *hndl, bool owned)
 * 
 * cdef class PackageScope(Scope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IPackageScope *asPackageScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_PackageScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_Scope __pyx_base;
  pssp::ast::IPackageScope *(*asPackageScope)(struct __pyx_obj_9pssparser_6pssast_PackageScope *);
  struct __pyx_obj_9pssparser_6pssast_PackageScope *(*mk)(pssp::ast::IPackageScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_PackageScope *__pyx_vtabptr_9pssparser_6pssast_PackageScope;


/* "pssparser/pssast.pxd":631
 *     cdef PackageScope mk(pssast_decl.IPackageScope *hndl, bool owned)
 * 
 * cdef class DataTypeArray(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeArray *asDataTypeArray(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeArray {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeArray *(*asDataTypeArray)(struct __pyx_obj_9pssparser_6pssast_DataTypeArray *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeArray *(*mk)(pssp::ast::IDataTypeArray *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeArray *__pyx_vtabptr_9pssparser_6pssast_DataTypeArray;


/* "pssparser/pssast.pxd":637
 *     cdef DataTypeArray mk(pssast_decl.IDataTypeArray *hndl, bool owned)
 * 
 * cdef class DataTypeBool(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeBool *asDataTypeBool(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeBool {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeBool *(*asDataTypeBool)(struct __pyx_obj_9pssparser_6pssast_DataTypeBool *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeBool *(*mk)(pssp::ast::IDataTypeBool *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeBool *__pyx_vtabptr_9pssparser_6pssast_DataTypeBool;


/* "pssparser/pssast.pxd":643
 *     cdef DataTypeBool mk(pssast_decl.IDataTypeBool *hndl, bool owned)
 * 
 * cdef class DataTypeChandle(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeChandle *asDataTypeChandle(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeChandle {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeChandle *(*asDataTypeChandle)(struct __pyx_obj_9pssparser_6pssast_DataTypeChandle *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeChandle *(*mk)(pssp::ast::IDataTypeChandle *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeChandle *__pyx_vtabptr_9pssparser_6pssast_DataTypeChandle;


/* "pssparser/pssast.pxd":649
 *     cdef DataTypeChandle mk(pssast_decl.IDataTypeChandle *hndl, bool owned)
 * 
 * cdef class DataTypeEnum(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeEnum *asDataTypeEnum(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeEnum {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeEnum *(*asDataTypeEnum)(struct __pyx_obj_9pssparser_6pssast_DataTypeEnum *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeEnum *(*mk)(pssp::ast::IDataTypeEnum *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeEnum *__pyx_vtabptr_9pssparser_6pssast_DataTypeEnum;


/* "pssparser/pssast.pxd":655
 *     cdef DataTypeEnum mk(pssast_decl.IDataTypeEnum *hndl, bool owned)
 * 
 * cdef class DataTypeInt(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeInt *asDataTypeInt(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeInt {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeInt *(*asDataTypeInt)(struct __pyx_obj_9pssparser_6pssast_DataTypeInt *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeInt *(*mk)(pssp::ast::IDataTypeInt *, bool);
  bool (*getIs_signed)(struct __pyx_obj_9pssparser_6pssast_DataTypeInt *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeInt *__pyx_vtabptr_9pssparser_6pssast_DataTypeInt;


/* "pssparser/pssast.pxd":662
 *     cpdef bool getIs_signed(self)
 * 
 * cdef class DataTypeString(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeString *asDataTypeString(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeString {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeString *(*asDataTypeString)(struct __pyx_obj_9pssparser_6pssast_DataTypeString *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeString *(*mk)(pssp::ast::IDataTypeString *, bool);
  bool (*getHas_range)(struct __pyx_obj_9pssparser_6pssast_DataTypeString *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeString *__pyx_vtabptr_9pssparser_6pssast_DataTypeString;


/* "pssparser/pssast.pxd":669
 *     cpdef bool getHas_range(self)
 * 
 * cdef class DataTypeUserDefined(DataType):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IDataTypeUserDefined *asDataTypeUserDefined(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeUserDefined {
  struct __pyx_vtabstruct_9pssparser_6pssast_DataType __pyx_base;
  pssp::ast::IDataTypeUserDefined *(*asDataTypeUserDefined)(struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *);
  struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *(*mk)(pssp::ast::IDataTypeUserDefined *, bool);
  bool (*getIs_global)(struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeUserDefined *__pyx_vtabptr_9pssparser_6pssast_DataTypeUserDefined;


/* "pssparser/pssast.pxd":676
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprRefPathContext(ExprRefPath):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathContext *asExprRefPathContext(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathContext {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPath __pyx_base;
  pssp::ast::IExprRefPathContext *(*asExprRefPathContext)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext *(*mk)(pssp::ast::IExprRefPathContext *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathContext *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathContext;


/* "pssparser/pssast.pxd":682
 *     cdef ExprRefPathContext mk(pssast_decl.IExprRefPathContext *hndl, bool owned)
 * 
 * cdef class ExprRefPathStatic(ExprRefPath):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStatic *asExprRefPathStatic(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStatic {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPath __pyx_base;
  pssp::ast::IExprRefPathStatic *(*asExprRefPathStatic)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *(*mk)(pssp::ast::IExprRefPathStatic *, bool);
  bool (*getIs_global)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStatic *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStatic;


/* "pssparser/pssast.pxd":689
 *     cpdef bool getIs_global(self)
 * 
 * cdef class ExprSignedNumber(ExprNumber):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprSignedNumber *asExprSignedNumber(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprSignedNumber {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprNumber __pyx_base;
  pssp::ast::IExprSignedNumber *(*asExprSignedNumber)(struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *);
  struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *(*mk)(pssp::ast::IExprSignedNumber *, bool);
  std::string (*getImage)(struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *, int __pyx_skip_dispatch);
  __pyx_t_9pssparser_6pssast_uint32_t (*getWidth)(struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *, int __pyx_skip_dispatch);
  __pyx_t_9pssparser_6pssast_int64_t (*getValue)(struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprSignedNumber *__pyx_vtabptr_9pssparser_6pssast_ExprSignedNumber;


/* "pssparser/pssast.pxd":698
 *     cpdef int64_t getValue(self)
 * 
 * cdef class ExprUnsignedNumber(ExprNumber):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprUnsignedNumber *asExprUnsignedNumber(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnsignedNumber {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprNumber __pyx_base;
  pssp::ast::IExprUnsignedNumber *(*asExprUnsignedNumber)(struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *);
  struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *(*mk)(pssp::ast::IExprUnsignedNumber *, bool);
  std::string (*getImage)(struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *, int __pyx_skip_dispatch);
  __pyx_t_9pssparser_6pssast_uint32_t (*getWidth)(struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *, int __pyx_skip_dispatch);
  __pyx_t_9pssparser_6pssast_uint64_t (*getValue)(struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnsignedNumber *__pyx_vtabptr_9pssparser_6pssast_ExprUnsignedNumber;


/* "pssparser/pssast.pxd":707
 *     cpdef uint64_t getValue(self)
 * 
 * cdef class ConstraintStmtForall(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtForall *asConstraintStmtForall(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForall {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope __pyx_base;
  pssp::ast::IConstraintStmtForall *(*asConstraintStmtForall)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall *(*mk)(pssp::ast::IConstraintStmtForall *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForall *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForall;


/* "pssparser/pssast.pxd":713
 *     cdef ConstraintStmtForall mk(pssast_decl.IConstraintStmtForall *hndl, bool owned)
 * 
 * cdef class ConstraintStmtForeach(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtForeach *asConstraintStmtForeach(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForeach {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope __pyx_base;
  pssp::ast::IConstraintStmtForeach *(*asConstraintStmtForeach)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach *(*mk)(pssp::ast::IConstraintStmtForeach *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForeach *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForeach;


/* "pssparser/pssast.pxd":719
 *     cdef ConstraintStmtForeach mk(pssast_decl.IConstraintStmtForeach *hndl, bool owned)
 * 
 * cdef class ConstraintStmtImplication(ConstraintScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IConstraintStmtImplication *asConstraintStmtImplication(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtImplication {
  struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope __pyx_base;
  pssp::ast::IConstraintStmtImplication *(*asConstraintStmtImplication)(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication *);
  struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication *(*mk)(pssp::ast::IConstraintStmtImplication *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtImplication *__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtImplication;


/* "pssparser/pssast.pxd":725
 *     cdef ConstraintStmtImplication mk(pssast_decl.IConstraintStmtImplication *hndl, bool owned)
 * 
 * cdef class TypeScope(NamedScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.ITypeScope *asTypeScope(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope {
  struct __pyx_vtabstruct_9pssparser_6pssast_NamedScope __pyx_base;
  pssp::ast::ITypeScope *(*asTypeScope)(struct __pyx_obj_9pssparser_6pssast_TypeScope *);
  struct __pyx_obj_9pssparser_6pssast_TypeScope *(*mk)(pssp::ast::ITypeScope *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope *__pyx_vtabptr_9pssparser_6pssast_TypeScope;


/* "pssparser/pssast.pxd":731
 *     cdef TypeScope mk(pssast_decl.ITypeScope *hndl, bool owned)
 * 
 * cdef class ExprRefPathStaticFunc(ExprRefPathStatic):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathStaticFunc *asExprRefPathStaticFunc(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticFunc {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStatic __pyx_base;
  pssp::ast::IExprRefPathStaticFunc *(*asExprRefPathStaticFunc)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc *(*mk)(pssp::ast::IExprRefPathStaticFunc *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticFunc *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticFunc;


/* "pssparser/pssast.pxd":737
 *     cdef ExprRefPathStaticFunc mk(pssast_decl.IExprRefPathStaticFunc *hndl, bool owned)
 * 
 * cdef class ExprRefPathSuper(ExprRefPathContext):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IExprRefPathSuper *asExprRefPathSuper(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathSuper {
  struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathContext __pyx_base;
  pssp::ast::IExprRefPathSuper *(*asExprRefPathSuper)(struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper *);
  struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper *(*mk)(pssp::ast::IExprRefPathSuper *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathSuper *__pyx_vtabptr_9pssparser_6pssast_ExprRefPathSuper;


/* "pssparser/pssast.pxd":743
 *     cdef ExprRefPathSuper mk(pssast_decl.IExprRefPathSuper *hndl, bool owned)
 * 
 * cdef class Action(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IAction *asAction(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Action {
  struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope __pyx_base;
  pssp::ast::IAction *(*asAction)(struct __pyx_obj_9pssparser_6pssast_Action *);
  struct __pyx_obj_9pssparser_6pssast_Action *(*mk)(pssp::ast::IAction *, bool);
  bool (*getIs_abstract)(struct __pyx_obj_9pssparser_6pssast_Action *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Action *__pyx_vtabptr_9pssparser_6pssast_Action;


/* "pssparser/pssast.pxd":750
 *     cpdef bool getIs_abstract(self)
 * 
 * cdef class Component(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IComponent *asComponent(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Component {
  struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope __pyx_base;
  pssp::ast::IComponent *(*asComponent)(struct __pyx_obj_9pssparser_6pssast_Component *);
  struct __pyx_obj_9pssparser_6pssast_Component *(*mk)(pssp::ast::IComponent *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Component *__pyx_vtabptr_9pssparser_6pssast_Component;


/* "pssparser/pssast.pxd":756
 *     cdef Component mk(pssast_decl.IComponent *hndl, bool owned)
 * 
 * cdef class Struct(TypeScope):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IStruct *asStruct(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Struct {
  struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope __pyx_base;
  pssp::ast::IStruct *(*asStruct)(struct __pyx_obj_9pssparser_6pssast_Struct *);
  struct __pyx_obj_9pssparser_6pssast_Struct *(*mk)(pssp::ast::IStruct *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Struct *__pyx_vtabptr_9pssparser_6pssast_Struct;


/* "pssparser/pssast.pxd":762
 *     cdef Struct mk(pssast_decl.IStruct *hndl, bool owned)
 * 
 * cdef class State(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IState *asState(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_State {
  struct __pyx_vtabstruct_9pssparser_6pssast_Struct __pyx_base;
  pssp::ast::IState *(*asState)(struct __pyx_obj_9pssparser_6pssast_State *);
  struct __pyx_obj_9pssparser_6pssast_State *(*mk)(pssp::ast::IState *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_State *__pyx_vtabptr_9pssparser_6pssast_State;


/* "pssparser/pssast.pxd":768
 *     cdef State mk(pssast_decl.IState *hndl, bool owned)
 * 
 * cdef class Stream(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IStream *asStream(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Stream {
  struct __pyx_vtabstruct_9pssparser_6pssast_Struct __pyx_base;
  pssp::ast::IStream *(*asStream)(struct __pyx_obj_9pssparser_6pssast_Stream *);
  struct __pyx_obj_9pssparser_6pssast_Stream *(*mk)(pssp::ast::IStream *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Stream *__pyx_vtabptr_9pssparser_6pssast_Stream;


/* "pssparser/pssast.pxd":774
 *     cdef Stream mk(pssast_decl.IStream *hndl, bool owned)
 * 
 * cdef class Buffer(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IBuffer *asBuffer(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Buffer {
  struct __pyx_vtabstruct_9pssparser_6pssast_Struct __pyx_base;
  pssp::ast::IBuffer *(*asBuffer)(struct __pyx_obj_9pssparser_6pssast_Buffer *);
  struct __pyx_obj_9pssparser_6pssast_Buffer *(*mk)(pssp::ast::IBuffer *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Buffer *__pyx_vtabptr_9pssparser_6pssast_Buffer;


/* "pssparser/pssast.pxd":780
 *     cdef Buffer mk(pssast_decl.IBuffer *hndl, bool owned)
 * 
 * cdef class Resource(Struct):             # <<<<<<<<<<<<<<
 * 
 *     cdef pssast_decl.IResource *asResource(self)
 */

struct __pyx_vtabstruct_9pssparser_6pssast_Resource {
  struct __pyx_vtabstruct_9pssparser_6pssast_Struct __pyx_base;
  pssp::ast::IResource *(*asResource)(struct __pyx_obj_9pssparser_6pssast_Resource *);
  struct __pyx_obj_9pssparser_6pssast_Resource *(*mk)(pssp::ast::IResource *, bool);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_Resource *__pyx_vtabptr_9pssparser_6pssast_Resource;


/* "pssparser/pssast.pxd":786
 *     cdef Resource mk(pssast_decl.IResource *hndl, bool owned)
 * 
 * cdef class VisitorBase(object):             # <<<<<<<<<<<<<<
 *     cdef pssast_decl.PyBaseVisitor *_hndl
 *     cdef bool                  _owned
 */

struct __pyx_vtabstruct_9pssparser_6pssast_VisitorBase {
  void (*visitExecStmt)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExecStmt *, int __pyx_skip_dispatch);
  void (*visitExpr)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Expr *, int __pyx_skip_dispatch);
  void (*visitRefExpr)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_RefExpr *, int __pyx_skip_dispatch);
  void (*visitTemplateParamDeclList)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList *, int __pyx_skip_dispatch);
  void (*visitTemplateParamDecl)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl *, int __pyx_skip_dispatch);
  void (*visitScopeChild)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ScopeChild *, int __pyx_skip_dispatch);
  void (*visitTemplateParamValueList)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList *, int __pyx_skip_dispatch);
  void (*visitTemplateParamValue)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamValue *, int __pyx_skip_dispatch);
  void (*visitTemplateParamTypeValue)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue *, int __pyx_skip_dispatch);
  void (*visitTemplateParamExprValue)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue *, int __pyx_skip_dispatch);
  void (*visitConstraintStmt)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmt *, int __pyx_skip_dispatch);
  void (*visitScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Scope *, int __pyx_skip_dispatch);
  void (*visitNamedScopeChild)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_NamedScopeChild *, int __pyx_skip_dispatch);
  void (*visitPackageImportStmt)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_PackageImportStmt *, int __pyx_skip_dispatch);
  void (*visitDataType)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataType *, int __pyx_skip_dispatch);
  void (*visitExecScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExecScope *, int __pyx_skip_dispatch);
  void (*visitProceduralStmtDataDeclaration)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration *, int __pyx_skip_dispatch);
  void (*visitExprBin)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprBin *, int __pyx_skip_dispatch);
  void (*visitExprBitSlice)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprBitSlice *, int __pyx_skip_dispatch);
  void (*visitExprBool)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprBool *, int __pyx_skip_dispatch);
  void (*visitExprCast)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprCast *, int __pyx_skip_dispatch);
  void (*visitExprCompileHas)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprCompileHas *, int __pyx_skip_dispatch);
  void (*visitExprCond)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprCond *, int __pyx_skip_dispatch);
  void (*visitExprDomainOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList *, int __pyx_skip_dispatch);
  void (*visitExprDomainOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue *, int __pyx_skip_dispatch);
  void (*visitExprHierarchicalId)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId *, int __pyx_skip_dispatch);
  void (*visitExprId)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprId *, int __pyx_skip_dispatch);
  void (*visitExprIn)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprIn *, int __pyx_skip_dispatch);
  void (*visitExprMemberPathElem)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem *, int __pyx_skip_dispatch);
  void (*visitExprNumber)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprNumber *, int __pyx_skip_dispatch);
  void (*visitExprAggregateLiteral)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral *, int __pyx_skip_dispatch);
  void (*visitExprOpenRangeList)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList *, int __pyx_skip_dispatch);
  void (*visitExprOpenRangeValue)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue *, int __pyx_skip_dispatch);
  void (*visitExprRefPath)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPath *, int __pyx_skip_dispatch);
  void (*visitExprRefPathElem)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem *, int __pyx_skip_dispatch);
  void (*visitExprRefPathStaticRooted)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted *, int __pyx_skip_dispatch);
  void (*visitExprStaticRefPath)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath *, int __pyx_skip_dispatch);
  void (*visitExprString)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprString *, int __pyx_skip_dispatch);
  void (*visitExprSubscript)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprSubscript *, int __pyx_skip_dispatch);
  void (*visitExprUnary)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprUnary *, int __pyx_skip_dispatch);
  void (*visitMethodParameterList)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_MethodParameterList *, int __pyx_skip_dispatch);
  void (*visitTypeIdentifier)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifier *, int __pyx_skip_dispatch);
  void (*visitTypeIdentifierElem)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem *, int __pyx_skip_dispatch);
  void (*visitRefExprTypeScopeGlobal)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal *, int __pyx_skip_dispatch);
  void (*visitRefExprTypeScopeContext)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext *, int __pyx_skip_dispatch);
  void (*visitRefExprScopeIndex)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex *, int __pyx_skip_dispatch);
  void (*visitTemplateGenericTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl *, int __pyx_skip_dispatch);
  void (*visitTemplateCategoryTypeParamDecl)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl *, int __pyx_skip_dispatch);
  void (*visitTemplateValueParamDecl)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl *, int __pyx_skip_dispatch);
  void (*visitConstraintBlock)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintBlock *, int __pyx_skip_dispatch);
  void (*visitConstraintScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintScope *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtDefault)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtDefaultDisable)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtExpr)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtField)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtIf)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtUnique)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique *, int __pyx_skip_dispatch);
  void (*visitGlobalScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_GlobalScope *, int __pyx_skip_dispatch);
  void (*visitNamedScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_NamedScope *, int __pyx_skip_dispatch);
  void (*visitPackageScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_PackageScope *, int __pyx_skip_dispatch);
  void (*visitDataTypeArray)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeArray *, int __pyx_skip_dispatch);
  void (*visitDataTypeBool)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeBool *, int __pyx_skip_dispatch);
  void (*visitDataTypeChandle)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeChandle *, int __pyx_skip_dispatch);
  void (*visitDataTypeEnum)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeEnum *, int __pyx_skip_dispatch);
  void (*visitDataTypeInt)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeInt *, int __pyx_skip_dispatch);
  void (*visitDataTypeString)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeString *, int __pyx_skip_dispatch);
  void (*visitDataTypeUserDefined)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined *, int __pyx_skip_dispatch);
  void (*visitExprRefPathContext)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext *, int __pyx_skip_dispatch);
  void (*visitExprRefPathStatic)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic *, int __pyx_skip_dispatch);
  void (*visitExprSignedNumber)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber *, int __pyx_skip_dispatch);
  void (*visitExprUnsignedNumber)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtForall)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtForeach)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach *, int __pyx_skip_dispatch);
  void (*visitConstraintStmtImplication)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication *, int __pyx_skip_dispatch);
  void (*visitTypeScope)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_TypeScope *, int __pyx_skip_dispatch);
  void (*visitExprRefPathStaticFunc)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc *, int __pyx_skip_dispatch);
  void (*visitExprRefPathSuper)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper *, int __pyx_skip_dispatch);
  void (*visitAction)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Action *, int __pyx_skip_dispatch);
  void (*visitComponent)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Component *, int __pyx_skip_dispatch);
  void (*visitStruct)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Struct *, int __pyx_skip_dispatch);
  void (*visitState)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_State *, int __pyx_skip_dispatch);
  void (*visitStream)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Stream *, int __pyx_skip_dispatch);
  void (*visitBuffer)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Buffer *, int __pyx_skip_dispatch);
  void (*visitResource)(struct __pyx_obj_9pssparser_6pssast_VisitorBase *, struct __pyx_obj_9pssparser_6pssast_Resource *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9pssparser_6pssast_VisitorBase *__pyx_vtabptr_9pssparser_6pssast_VisitorBase;


/* "python/core.pyx":5
 * cimport ciostream
 * 
 * cdef class Factory(object):             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         self._hndl = NULL
 */

struct __pyx_vtabstruct_9pssparser_4core_Factory {
  struct __pyx_obj_9pssparser_4core_AstBuilder *(*mkAstBuilder)(struct __pyx_obj_9pssparser_4core_Factory *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_4core_Factory *(*inst)(void);
};
static struct __pyx_vtabstruct_9pssparser_4core_Factory *__pyx_vtabptr_9pssparser_4core_Factory;


/* "python/core.pyx":31
 *         print("static")
 * 
 * cdef class AstBuilder(object):             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

struct __pyx_vtabstruct_9pssparser_4core_AstBuilder {
  PyObject *(*build)(struct __pyx_obj_9pssparser_4core_AstBuilder *, struct __pyx_obj_9pssparser_6pssast_GlobalScope *, struct __pyx_obj_9ciostream_cistream *, struct __pyx_obj_9pssparser_4core_MarkerListener *, int __pyx_skip_dispatch);
  struct __pyx_obj_9pssparser_4core_AstBuilder *(*mk)(pssp::IAstBuilder *);
};
static struct __pyx_vtabstruct_9pssparser_4core_AstBuilder *__pyx_vtabptr_9pssparser_4core_AstBuilder;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* VoidPtrExport.proto */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_f_9pssparser_4core_7Factory_mkAstBuilder(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9pssparser_4core_Factory *__pyx_f_9pssparser_4core_7Factory_inst(void); /* proto*/
static PyObject *__pyx_f_9pssparser_4core_10AstBuilder_build(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, struct __pyx_obj_9pssparser_6pssast_GlobalScope *__pyx_v_root, struct __pyx_obj_9ciostream_cistream *__pyx_v_in_s, struct __pyx_obj_9pssparser_4core_MarkerListener *__pyx_v_listener, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_f_9pssparser_4core_10AstBuilder_mk(pssp::IAstBuilder *__pyx_v_hndl); /* proto*/

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'pssparser.pssast_decl' */

/* Module declarations from 'ciostream' */
static PyTypeObject *__pyx_ptype_9ciostream_cistream = 0;
static PyTypeObject *__pyx_ptype_9ciostream_costream = 0;

/* Module declarations from 'pssparser.decl' */

/* Module declarations from 'pssparser' */

/* Module declarations from 'pssparser.pssast' */
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Factory = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExecStmt = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Expr = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_RefExpr = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamDeclList = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamDecl = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ScopeChild = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamValueList = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamValue = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamTypeValue = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateParamExprValue = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmt = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Scope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_NamedScopeChild = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_PackageImportStmt = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataType = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExecScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ProceduralStmtDataDeclaration = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprBin = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprBitSlice = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprBool = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprCast = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprCompileHas = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprCond = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeList = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeValue = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprHierarchicalId = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprId = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprIn = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprMemberPathElem = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprNumber = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprAggregateLiteral = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprOpenRangeList = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprOpenRangeValue = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPath = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathElem = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticRooted = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprStaticRefPath = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprString = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprSubscript = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprUnary = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_MethodParameterList = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TypeIdentifier = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TypeIdentifierElem = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeGlobal = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeContext = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_RefExprScopeIndex = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateGenericTypeParamDecl = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateCategoryTypeParamDecl = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TemplateValueParamDecl = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintBlock = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefault = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefaultDisable = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtExpr = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtField = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtIf = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtUnique = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_GlobalScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_NamedScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_PackageScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeArray = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeBool = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeChandle = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeEnum = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeInt = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeString = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_DataTypeUserDefined = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathContext = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathStatic = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprSignedNumber = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprUnsignedNumber = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtForall = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtForeach = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ConstraintStmtImplication = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_TypeScope = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticFunc = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_ExprRefPathSuper = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Action = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Component = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Struct = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_State = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Stream = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Buffer = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_Resource = 0;
static PyTypeObject *__pyx_ptype_9pssparser_6pssast_VisitorBase = 0;

/* Module declarations from 'pssparser.core' */
static PyTypeObject *__pyx_ptype_9pssparser_4core_Factory = 0;
static PyTypeObject *__pyx_ptype_9pssparser_4core_AstBuilder = 0;
static PyTypeObject *__pyx_ptype_9pssparser_4core_MarkerListener = 0;
static struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_9pssparser_4core__factoryInst = 0;
#define __Pyx_MODULE_NAME "pssparser.core"
extern int __pyx_module_is_main_pssparser__core;
int __pyx_module_is_main_pssparser__core = 0;

/* Implementation of 'pssparser.core' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_in_s[] = "in_s";
static const char __pyx_k_inst[] = "inst";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_build[] = "build";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_static[] = "static";
static const char __pyx_k_Factory[] = "Factory";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_listener[] = "listener";
static const char __pyx_k_pyx_capi[] = "__pyx_capi__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_AstBuilder[] = "AstBuilder";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_factoryInst[] = "_factoryInst";
static const char __pyx_k_mkAstBuilder[] = "mkAstBuilder";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_MarkerListener[] = "MarkerListener";
static const char __pyx_k_pssparser_core[] = "pssparser.core";
static const char __pyx_k_python_core_pyx[] = "python/core.pyx";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_TODO_must_create_factory[] = "TODO: must create factory";
static const char __pyx_k_self__hndl_cannot_be_converted_t[] = "self._hndl cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_AstBuilder;
static PyObject *__pyx_n_s_Factory;
static PyObject *__pyx_n_s_MarkerListener;
static PyObject *__pyx_kp_u_TODO_must_create_factory;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_factoryInst;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_in_s;
static PyObject *__pyx_n_s_inst;
static PyObject *__pyx_n_s_listener;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mkAstBuilder;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pssparser_core;
static PyObject *__pyx_kp_s_python_core_pyx;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_kp_s_self__hndl_cannot_be_converted_t;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_u_static;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_test;
static int __pyx_pf_9pssparser_4core_7Factory___init__(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_7Factory_2mkAstBuilder(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_7Factory_4inst(void); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_7Factory_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_7Factory_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_9pssparser_4core_10AstBuilder___dealloc__(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_2build(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, struct __pyx_obj_9pssparser_6pssast_GlobalScope *__pyx_v_root, struct __pyx_obj_9ciostream_cistream *__pyx_v_in_s, struct __pyx_obj_9pssparser_4core_MarkerListener *__pyx_v_listener); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9pssparser_4core_Factory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pssparser_4core_AstBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pssparser_4core_MarkerListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_codeobj__7;
/* Late includes */

/* "python/core.pyx":6
 * 
 * cdef class Factory(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._hndl = NULL
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_9pssparser_4core_7Factory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pssparser_4core_7Factory_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_9pssparser_4core_7Factory___init__(((struct __pyx_obj_9pssparser_4core_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pssparser_4core_7Factory___init__(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "python/core.pyx":7
 * cdef class Factory(object):
 *     def __init__(self):
 *         self._hndl = NULL             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_v_self->_hndl = NULL;

  /* "python/core.pyx":6
 * 
 * cdef class Factory(object):
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self._hndl = NULL
 *         pass
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/core.pyx":10
 *         pass
 * 
 *     cpdef AstBuilder mkAstBuilder(self):             # <<<<<<<<<<<<<<
 *         return AstBuilder.mk(self._hndl.mkAstBuilder())
 *         pass
 */

static PyObject *__pyx_pw_9pssparser_4core_7Factory_3mkAstBuilder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_f_9pssparser_4core_7Factory_mkAstBuilder(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAstBuilder", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mkAstBuilder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9pssparser_4core_7Factory_3mkAstBuilder)) {
        __Pyx_XDECREF(((PyObject *)__pyx_r));
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_9pssparser_4core_AstBuilder))))) __PYX_ERR(0, 10, __pyx_L1_error)
        __pyx_r = ((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "python/core.pyx":11
 * 
 *     cpdef AstBuilder mkAstBuilder(self):
 *         return AstBuilder.mk(self._hndl.mkAstBuilder())             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_9pssparser_4core_10AstBuilder_mk(__pyx_v_self->_hndl->mkAstBuilder())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "python/core.pyx":10
 *         pass
 * 
 *     cpdef AstBuilder mkAstBuilder(self):             # <<<<<<<<<<<<<<
 *         return AstBuilder.mk(self._hndl.mkAstBuilder())
 *         pass
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pssparser.core.Factory.mkAstBuilder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_7Factory_3mkAstBuilder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_7Factory_3mkAstBuilder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mkAstBuilder (wrapper)", 0);
  __pyx_r = __pyx_pf_9pssparser_4core_7Factory_2mkAstBuilder(((struct __pyx_obj_9pssparser_4core_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_7Factory_2mkAstBuilder(struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mkAstBuilder", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_9pssparser_4core_7Factory_mkAstBuilder(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.Factory.mkAstBuilder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/core.pyx":15
 * 
 *     @staticmethod
 *     cdef Factory inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */

static struct __pyx_obj_9pssparser_4core_Factory *__pyx_f_9pssparser_4core_7Factory_inst(void) {
  struct __pyx_obj_9pssparser_4core_Factory *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inst", 0);

  /* "python/core.pyx":17
 *     cdef Factory inst():
 *         global _factoryInst
 *         if _factoryInst is None:             # <<<<<<<<<<<<<<
 *             print("TODO: must create factory")
 *             pass
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_9pssparser_4core__factoryInst) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "python/core.pyx":18
 *         global _factoryInst
 *         if _factoryInst is None:
 *             print("TODO: must create factory")             # <<<<<<<<<<<<<<
 *             pass
 *         pass
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "python/core.pyx":17
 *     cdef Factory inst():
 *         global _factoryInst
 *         if _factoryInst is None:             # <<<<<<<<<<<<<<
 *             print("TODO: must create factory")
 *             pass
 */
  }

  /* "python/core.pyx":15
 * 
 *     @staticmethod
 *     cdef Factory inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */

  /* function exit code */
  __pyx_r = ((struct __pyx_obj_9pssparser_4core_Factory *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pssparser.core.Factory.inst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/core.pyx":23
 * 
 *     @staticmethod
 *     def inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_7Factory_5inst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9pssparser_4core_7Factory_5inst = {"inst", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9pssparser_4core_7Factory_5inst, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pssparser_4core_7Factory_5inst(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inst (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("inst", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "inst", 0))) return NULL;
  __pyx_r = __pyx_pf_9pssparser_4core_7Factory_4inst();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_7Factory_4inst(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inst", 0);

  /* "python/core.pyx":25
 *     def inst():
 *         global _factoryInst
 *         if _factoryInst is None:             # <<<<<<<<<<<<<<
 *             print("TODO: must create factory")
 *             _factoryInst = Factory()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_9pssparser_4core__factoryInst) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "python/core.pyx":26
 *         global _factoryInst
 *         if _factoryInst is None:
 *             print("TODO: must create factory")             # <<<<<<<<<<<<<<
 *             _factoryInst = Factory()
 *             pass
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "python/core.pyx":27
 *         if _factoryInst is None:
 *             print("TODO: must create factory")
 *             _factoryInst = Factory()             # <<<<<<<<<<<<<<
 *             pass
 *         print("static")
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pssparser_4core_Factory)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(((PyObject *)__pyx_v_9pssparser_4core__factoryInst));
    __Pyx_DECREF_SET(__pyx_v_9pssparser_4core__factoryInst, ((struct __pyx_obj_9pssparser_4core_Factory *)__pyx_t_3));
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "python/core.pyx":25
 *     def inst():
 *         global _factoryInst
 *         if _factoryInst is None:             # <<<<<<<<<<<<<<
 *             print("TODO: must create factory")
 *             _factoryInst = Factory()
 */
  }

  /* "python/core.pyx":29
 *             _factoryInst = Factory()
 *             pass
 *         print("static")             # <<<<<<<<<<<<<<
 * 
 * cdef class AstBuilder(object):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "python/core.pyx":23
 * 
 *     @staticmethod
 *     def inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pssparser.core.Factory.inst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_7Factory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_7Factory_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pssparser_4core_7Factory_6__reduce_cython__(((struct __pyx_obj_9pssparser_4core_Factory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_7Factory_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.Factory.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_7Factory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_7Factory_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pssparser_4core_7Factory_8__setstate_cython__(((struct __pyx_obj_9pssparser_4core_Factory *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_7Factory_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_Factory *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.Factory.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/core.pyx":33
 * cdef class AstBuilder(object):
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._hndl
 * 
 */

/* Python wrapper */
static void __pyx_pw_9pssparser_4core_10AstBuilder_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pssparser_4core_10AstBuilder_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_9pssparser_4core_10AstBuilder___dealloc__(((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pssparser_4core_10AstBuilder___dealloc__(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "python/core.pyx":34
 * 
 *     def __dealloc__(self):
 *         del self._hndl             # <<<<<<<<<<<<<<
 * 
 *     cpdef build(self,
 */
  delete __pyx_v_self->_hndl;

  /* "python/core.pyx":33
 * cdef class AstBuilder(object):
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._hndl
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "python/core.pyx":36
 *         del self._hndl
 * 
 *     cpdef build(self,             # <<<<<<<<<<<<<<
 *         ast.GlobalScope         root,
 *         ciostream.cistream      in_s,
 */

static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_9pssparser_4core_10AstBuilder_build(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, struct __pyx_obj_9pssparser_6pssast_GlobalScope *__pyx_v_root, struct __pyx_obj_9ciostream_cistream *__pyx_v_in_s, struct __pyx_obj_9pssparser_4core_MarkerListener *__pyx_v_listener, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_9pssparser_4core_10AstBuilder_3build)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_root), ((PyObject *)__pyx_v_in_s), ((PyObject *)__pyx_v_listener)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_root), ((PyObject *)__pyx_v_in_s), ((PyObject *)__pyx_v_listener)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 36, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(((PyObject *)__pyx_v_root));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_root));
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_root));
          __Pyx_INCREF(((PyObject *)__pyx_v_in_s));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_in_s));
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_in_s));
          __Pyx_INCREF(((PyObject *)__pyx_v_listener));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_listener));
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_listener));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "python/core.pyx":40
 *         ciostream.cistream      in_s,
 *         MarkerListener          listener):
 *         self._hndl.build(             # <<<<<<<<<<<<<<
 *             root.asGlobalScope(),
 *             in_s.stream(),
 */
  __pyx_v_self->_hndl->build(((struct __pyx_vtabstruct_9pssparser_6pssast_GlobalScope *)__pyx_v_root->__pyx_base.__pyx_base.__pyx_vtab)->asGlobalScope(__pyx_v_root), ((struct __pyx_vtabstruct_9ciostream_cistream *)__pyx_v_in_s->__pyx_vtab)->stream(__pyx_v_in_s), __pyx_v_listener->_hndl);

  /* "python/core.pyx":36
 *         del self._hndl
 * 
 *     cpdef build(self,             # <<<<<<<<<<<<<<
 *         ast.GlobalScope         root,
 *         ciostream.cistream      in_s,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pssparser.core.AstBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_3build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pssparser_6pssast_GlobalScope *__pyx_v_root = 0;
  struct __pyx_obj_9ciostream_cistream *__pyx_v_in_s = 0;
  struct __pyx_obj_9pssparser_4core_MarkerListener *__pyx_v_listener = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_root,&__pyx_n_s_in_s,&__pyx_n_s_listener,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_root)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("build", 1, 3, 3, 1); __PYX_ERR(0, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_listener)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("build", 1, 3, 3, 2); __PYX_ERR(0, 36, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "build") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_root = ((struct __pyx_obj_9pssparser_6pssast_GlobalScope *)values[0]);
    __pyx_v_in_s = ((struct __pyx_obj_9ciostream_cistream *)values[1]);
    __pyx_v_listener = ((struct __pyx_obj_9pssparser_4core_MarkerListener *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pssparser.core.AstBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_root), __pyx_ptype_9pssparser_6pssast_GlobalScope, 1, "root", 0))) __PYX_ERR(0, 37, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_s), __pyx_ptype_9ciostream_cistream, 1, "in_s", 0))) __PYX_ERR(0, 38, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_listener), __pyx_ptype_9pssparser_4core_MarkerListener, 1, "listener", 0))) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pssparser_4core_10AstBuilder_2build(((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_v_self), __pyx_v_root, __pyx_v_in_s, __pyx_v_listener);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_2build(struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, struct __pyx_obj_9pssparser_6pssast_GlobalScope *__pyx_v_root, struct __pyx_obj_9ciostream_cistream *__pyx_v_in_s, struct __pyx_obj_9pssparser_4core_MarkerListener *__pyx_v_listener) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("build", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_9pssparser_4core_10AstBuilder_build(__pyx_v_self, __pyx_v_root, __pyx_v_in_s, __pyx_v_listener, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.AstBuilder.build", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "python/core.pyx":46
 * 
 *     @staticmethod
 *     cdef AstBuilder mk(decl.IAstBuilder *hndl):             # <<<<<<<<<<<<<<
 *         ret = AstBuilder()
 *         ret._hndl = hndl
 */

static struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_f_9pssparser_4core_10AstBuilder_mk(pssp::IAstBuilder *__pyx_v_hndl) {
  struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_ret = NULL;
  struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mk", 0);

  /* "python/core.pyx":47
 *     @staticmethod
 *     cdef AstBuilder mk(decl.IAstBuilder *hndl):
 *         ret = AstBuilder()             # <<<<<<<<<<<<<<
 *         ret._hndl = hndl
 *         return ret
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pssparser_4core_AstBuilder)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "python/core.pyx":48
 *     cdef AstBuilder mk(decl.IAstBuilder *hndl):
 *         ret = AstBuilder()
 *         ret._hndl = hndl             # <<<<<<<<<<<<<<
 *         return ret
 */
  __pyx_v_ret->_hndl = __pyx_v_hndl;

  /* "python/core.pyx":49
 *         ret = AstBuilder()
 *         ret._hndl = hndl
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "python/core.pyx":46
 * 
 *     @staticmethod
 *     cdef AstBuilder mk(decl.IAstBuilder *hndl):             # <<<<<<<<<<<<<<
 *         ret = AstBuilder()
 *         ret._hndl = hndl
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.AstBuilder.mk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pssparser_4core_10AstBuilder_4__reduce_cython__(((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.AstBuilder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_9pssparser_4core_10AstBuilder_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_9pssparser_4core_10AstBuilder_6__setstate_cython__(((struct __pyx_obj_9pssparser_4core_AstBuilder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pssparser_4core_10AstBuilder_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pssparser_4core_AstBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pssparser.core.AstBuilder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9pssparser_4core_Factory __pyx_vtable_9pssparser_4core_Factory;

static PyObject *__pyx_tp_new_9pssparser_4core_Factory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9pssparser_4core_Factory *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9pssparser_4core_Factory *)o);
  p->__pyx_vtab = __pyx_vtabptr_9pssparser_4core_Factory;
  return o;
}

static void __pyx_tp_dealloc_9pssparser_4core_Factory(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9pssparser_4core_Factory[] = {
  {"mkAstBuilder", (PyCFunction)__pyx_pw_9pssparser_4core_7Factory_3mkAstBuilder, METH_NOARGS, 0},
  {"inst", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9pssparser_4core_7Factory_5inst, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9pssparser_4core_7Factory_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9pssparser_4core_7Factory_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9pssparser_4core_Factory = {
  PyVarObject_HEAD_INIT(0, 0)
  "pssparser.core.Factory", /*tp_name*/
  sizeof(struct __pyx_obj_9pssparser_4core_Factory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pssparser_4core_Factory, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9pssparser_4core_Factory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9pssparser_4core_7Factory_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pssparser_4core_Factory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_9pssparser_4core_AstBuilder __pyx_vtable_9pssparser_4core_AstBuilder;

static PyObject *__pyx_tp_new_9pssparser_4core_AstBuilder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9pssparser_4core_AstBuilder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9pssparser_4core_AstBuilder *)o);
  p->__pyx_vtab = __pyx_vtabptr_9pssparser_4core_AstBuilder;
  return o;
}

static void __pyx_tp_dealloc_9pssparser_4core_AstBuilder(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pssparser_4core_10AstBuilder_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_9pssparser_4core_AstBuilder[] = {
  {"build", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_9pssparser_4core_10AstBuilder_3build, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_9pssparser_4core_10AstBuilder_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_9pssparser_4core_10AstBuilder_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9pssparser_4core_AstBuilder = {
  PyVarObject_HEAD_INIT(0, 0)
  "pssparser.core.AstBuilder", /*tp_name*/
  sizeof(struct __pyx_obj_9pssparser_4core_AstBuilder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pssparser_4core_AstBuilder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9pssparser_4core_AstBuilder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pssparser_4core_AstBuilder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_9pssparser_4core_MarkerListener(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_9pssparser_4core_MarkerListener(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_9pssparser_4core_MarkerListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "pssparser.core.MarkerListener", /*tp_name*/
  sizeof(struct __pyx_obj_9pssparser_4core_MarkerListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pssparser_4core_MarkerListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pssparser_4core_MarkerListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AstBuilder, __pyx_k_AstBuilder, sizeof(__pyx_k_AstBuilder), 0, 0, 1, 1},
  {&__pyx_n_s_Factory, __pyx_k_Factory, sizeof(__pyx_k_Factory), 0, 0, 1, 1},
  {&__pyx_n_s_MarkerListener, __pyx_k_MarkerListener, sizeof(__pyx_k_MarkerListener), 0, 0, 1, 1},
  {&__pyx_kp_u_TODO_must_create_factory, __pyx_k_TODO_must_create_factory, sizeof(__pyx_k_TODO_must_create_factory), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_factoryInst, __pyx_k_factoryInst, sizeof(__pyx_k_factoryInst), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_in_s, __pyx_k_in_s, sizeof(__pyx_k_in_s), 0, 0, 1, 1},
  {&__pyx_n_s_inst, __pyx_k_inst, sizeof(__pyx_k_inst), 0, 0, 1, 1},
  {&__pyx_n_s_listener, __pyx_k_listener, sizeof(__pyx_k_listener), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mkAstBuilder, __pyx_k_mkAstBuilder, sizeof(__pyx_k_mkAstBuilder), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pssparser_core, __pyx_k_pssparser_core, sizeof(__pyx_k_pssparser_core), 0, 0, 1, 1},
  {&__pyx_kp_s_python_core_pyx, __pyx_k_python_core_pyx, sizeof(__pyx_k_python_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_kp_s_self__hndl_cannot_be_converted_t, __pyx_k_self__hndl_cannot_be_converted_t, sizeof(__pyx_k_self__hndl_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_u_static, __pyx_k_static, sizeof(__pyx_k_static), 0, 1, 0, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "python/core.pyx":18
 *         global _factoryInst
 *         if _factoryInst is None:
 *             print("TODO: must create factory")             # <<<<<<<<<<<<<<
 *             pass
 *         pass
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_TODO_must_create_factory); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "python/core.pyx":29
 *             _factoryInst = Factory()
 *             pass
 *         print("static")             # <<<<<<<<<<<<<<
 * 
 * cdef class AstBuilder(object):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_u_static); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__hndl_cannot_be_converted_t); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__hndl_cannot_be_converted_t); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self__hndl_cannot_be_converted_t); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._hndl cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__hndl_cannot_be_converted_t); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "python/core.pyx":23
 * 
 *     @staticmethod
 *     def inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_python_core_pyx, __pyx_n_s_inst, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_9pssparser_4core__factoryInst = ((struct __pyx_obj_9pssparser_4core_Factory *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_factoryInst, (void *)&__pyx_v_9pssparser_4core__factoryInst, "struct __pyx_obj_9pssparser_4core_Factory *") < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_9pssparser_4core_Factory = &__pyx_vtable_9pssparser_4core_Factory;
  __pyx_vtable_9pssparser_4core_Factory.mkAstBuilder = (struct __pyx_obj_9pssparser_4core_AstBuilder *(*)(struct __pyx_obj_9pssparser_4core_Factory *, int __pyx_skip_dispatch))__pyx_f_9pssparser_4core_7Factory_mkAstBuilder;
  __pyx_vtable_9pssparser_4core_Factory.inst = (struct __pyx_obj_9pssparser_4core_Factory *(*)(void))__pyx_f_9pssparser_4core_7Factory_inst;
  if (PyType_Ready(&__pyx_type_9pssparser_4core_Factory) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9pssparser_4core_Factory.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9pssparser_4core_Factory.tp_dictoffset && __pyx_type_9pssparser_4core_Factory.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9pssparser_4core_Factory.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9pssparser_4core_Factory.tp_dict, __pyx_vtabptr_9pssparser_4core_Factory) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Factory, (PyObject *)&__pyx_type_9pssparser_4core_Factory) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9pssparser_4core_Factory) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __pyx_ptype_9pssparser_4core_Factory = &__pyx_type_9pssparser_4core_Factory;
  __pyx_vtabptr_9pssparser_4core_AstBuilder = &__pyx_vtable_9pssparser_4core_AstBuilder;
  __pyx_vtable_9pssparser_4core_AstBuilder.build = (PyObject *(*)(struct __pyx_obj_9pssparser_4core_AstBuilder *, struct __pyx_obj_9pssparser_6pssast_GlobalScope *, struct __pyx_obj_9ciostream_cistream *, struct __pyx_obj_9pssparser_4core_MarkerListener *, int __pyx_skip_dispatch))__pyx_f_9pssparser_4core_10AstBuilder_build;
  __pyx_vtable_9pssparser_4core_AstBuilder.mk = (struct __pyx_obj_9pssparser_4core_AstBuilder *(*)(pssp::IAstBuilder *))__pyx_f_9pssparser_4core_10AstBuilder_mk;
  if (PyType_Ready(&__pyx_type_9pssparser_4core_AstBuilder) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9pssparser_4core_AstBuilder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9pssparser_4core_AstBuilder.tp_dictoffset && __pyx_type_9pssparser_4core_AstBuilder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9pssparser_4core_AstBuilder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_9pssparser_4core_AstBuilder.tp_dict, __pyx_vtabptr_9pssparser_4core_AstBuilder) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AstBuilder, (PyObject *)&__pyx_type_9pssparser_4core_AstBuilder) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_9pssparser_4core_AstBuilder) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_ptype_9pssparser_4core_AstBuilder = &__pyx_type_9pssparser_4core_AstBuilder;
  if (PyType_Ready(&__pyx_type_9pssparser_4core_MarkerListener) < 0) __PYX_ERR(2, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_9pssparser_4core_MarkerListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_9pssparser_4core_MarkerListener.tp_dictoffset && __pyx_type_9pssparser_4core_MarkerListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_9pssparser_4core_MarkerListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MarkerListener, (PyObject *)&__pyx_type_9pssparser_4core_MarkerListener) < 0) __PYX_ERR(2, 31, __pyx_L1_error)
  __pyx_ptype_9pssparser_4core_MarkerListener = &__pyx_type_9pssparser_4core_MarkerListener;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ciostream"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9ciostream_cistream = __Pyx_ImportType(__pyx_t_1, "ciostream", "cistream", sizeof(struct __pyx_obj_9ciostream_cistream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9ciostream_cistream) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_vtabptr_9ciostream_cistream = (struct __pyx_vtabstruct_9ciostream_cistream*)__Pyx_GetVtable(__pyx_ptype_9ciostream_cistream->tp_dict); if (unlikely(!__pyx_vtabptr_9ciostream_cistream)) __PYX_ERR(4, 38, __pyx_L1_error)
  __pyx_ptype_9ciostream_costream = __Pyx_ImportType(__pyx_t_1, "ciostream", "costream", sizeof(struct __pyx_obj_9ciostream_costream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9ciostream_costream) __PYX_ERR(4, 42, __pyx_L1_error)
  __pyx_vtabptr_9ciostream_costream = (struct __pyx_vtabstruct_9ciostream_costream*)__Pyx_GetVtable(__pyx_ptype_9ciostream_costream->tp_dict); if (unlikely(!__pyx_vtabptr_9ciostream_costream)) __PYX_ERR(4, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("pssparser.pssast"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_9pssparser_6pssast_Factory = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Factory", sizeof(struct __pyx_obj_9pssparser_6pssast_Factory), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Factory) __PYX_ERR(5, 23, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Factory = (struct __pyx_vtabstruct_9pssparser_6pssast_Factory*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Factory->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Factory)) __PYX_ERR(5, 23, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExecStmt = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExecStmt", sizeof(struct __pyx_obj_9pssparser_6pssast_ExecStmt), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExecStmt) __PYX_ERR(5, 224, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExecStmt = (struct __pyx_vtabstruct_9pssparser_6pssast_ExecStmt*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExecStmt->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExecStmt)) __PYX_ERR(5, 224, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Expr = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Expr", sizeof(struct __pyx_obj_9pssparser_6pssast_Expr), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Expr) __PYX_ERR(5, 233, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Expr = (struct __pyx_vtabstruct_9pssparser_6pssast_Expr*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Expr->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Expr)) __PYX_ERR(5, 233, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_RefExpr = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "RefExpr", sizeof(struct __pyx_obj_9pssparser_6pssast_RefExpr), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_RefExpr) __PYX_ERR(5, 242, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_RefExpr = (struct __pyx_vtabstruct_9pssparser_6pssast_RefExpr*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_RefExpr->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_RefExpr)) __PYX_ERR(5, 242, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamDeclList = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamDeclList", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamDeclList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamDeclList) __PYX_ERR(5, 251, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamDeclList = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDeclList*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamDeclList->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamDeclList)) __PYX_ERR(5, 251, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamDecl = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamDecl", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamDecl), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamDecl) __PYX_ERR(5, 260, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamDecl = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamDecl*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamDecl->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamDecl)) __PYX_ERR(5, 260, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ScopeChild = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ScopeChild", sizeof(struct __pyx_obj_9pssparser_6pssast_ScopeChild), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ScopeChild) __PYX_ERR(5, 269, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ScopeChild = (struct __pyx_vtabstruct_9pssparser_6pssast_ScopeChild*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ScopeChild->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ScopeChild)) __PYX_ERR(5, 269, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamValueList = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamValueList", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamValueList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamValueList) __PYX_ERR(5, 280, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamValueList = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValueList*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamValueList->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamValueList)) __PYX_ERR(5, 280, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamValue = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamValue", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamValue) __PYX_ERR(5, 289, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamValue = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamValue*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamValue->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamValue)) __PYX_ERR(5, 289, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamTypeValue = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamTypeValue", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamTypeValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamTypeValue) __PYX_ERR(5, 298, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamTypeValue = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamTypeValue*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamTypeValue->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamTypeValue)) __PYX_ERR(5, 298, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateParamExprValue = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateParamExprValue", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateParamExprValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateParamExprValue) __PYX_ERR(5, 307, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateParamExprValue = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateParamExprValue*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateParamExprValue->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateParamExprValue)) __PYX_ERR(5, 307, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmt = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmt", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmt), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmt) __PYX_ERR(5, 316, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmt = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmt*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmt->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmt)) __PYX_ERR(5, 316, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Scope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Scope", sizeof(struct __pyx_obj_9pssparser_6pssast_Scope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Scope) __PYX_ERR(5, 322, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Scope = (struct __pyx_vtabstruct_9pssparser_6pssast_Scope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Scope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Scope)) __PYX_ERR(5, 322, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_NamedScopeChild = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "NamedScopeChild", sizeof(struct __pyx_obj_9pssparser_6pssast_NamedScopeChild), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_NamedScopeChild) __PYX_ERR(5, 328, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_NamedScopeChild = (struct __pyx_vtabstruct_9pssparser_6pssast_NamedScopeChild*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_NamedScopeChild->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_NamedScopeChild)) __PYX_ERR(5, 328, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_PackageImportStmt = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "PackageImportStmt", sizeof(struct __pyx_obj_9pssparser_6pssast_PackageImportStmt), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_PackageImportStmt) __PYX_ERR(5, 334, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_PackageImportStmt = (struct __pyx_vtabstruct_9pssparser_6pssast_PackageImportStmt*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_PackageImportStmt->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_PackageImportStmt)) __PYX_ERR(5, 334, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataType = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataType", sizeof(struct __pyx_obj_9pssparser_6pssast_DataType), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataType) __PYX_ERR(5, 341, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataType = (struct __pyx_vtabstruct_9pssparser_6pssast_DataType*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataType->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataType)) __PYX_ERR(5, 341, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExecScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExecScope", sizeof(struct __pyx_obj_9pssparser_6pssast_ExecScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExecScope) __PYX_ERR(5, 347, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExecScope = (struct __pyx_vtabstruct_9pssparser_6pssast_ExecScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExecScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExecScope)) __PYX_ERR(5, 347, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ProceduralStmtDataDeclaration = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ProceduralStmtDataDeclaration", sizeof(struct __pyx_obj_9pssparser_6pssast_ProceduralStmtDataDeclaration), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ProceduralStmtDataDeclaration) __PYX_ERR(5, 353, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ProceduralStmtDataDeclaration = (struct __pyx_vtabstruct_9pssparser_6pssast_ProceduralStmtDataDeclaration*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ProceduralStmtDataDeclaration->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ProceduralStmtDataDeclaration)) __PYX_ERR(5, 353, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprBin = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprBin", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprBin), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprBin) __PYX_ERR(5, 359, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprBin = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprBin*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprBin->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprBin)) __PYX_ERR(5, 359, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprBitSlice = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprBitSlice", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprBitSlice), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprBitSlice) __PYX_ERR(5, 365, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprBitSlice = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprBitSlice*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprBitSlice->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprBitSlice)) __PYX_ERR(5, 365, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprBool = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprBool", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprBool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprBool) __PYX_ERR(5, 371, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprBool = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprBool*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprBool->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprBool)) __PYX_ERR(5, 371, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprCast = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprCast", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprCast), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprCast) __PYX_ERR(5, 378, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprCast = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprCast*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprCast->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprCast)) __PYX_ERR(5, 378, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprCompileHas = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprCompileHas", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprCompileHas), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprCompileHas) __PYX_ERR(5, 384, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprCompileHas = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprCompileHas*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprCompileHas->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprCompileHas)) __PYX_ERR(5, 384, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprCond = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprCond", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprCond), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprCond) __PYX_ERR(5, 390, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprCond = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprCond*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprCond->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprCond)) __PYX_ERR(5, 390, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeList = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprDomainOpenRangeList", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeList) __PYX_ERR(5, 396, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeList = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeList*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeList->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeList)) __PYX_ERR(5, 396, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeValue = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprDomainOpenRangeValue", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprDomainOpenRangeValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeValue) __PYX_ERR(5, 402, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeValue = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprDomainOpenRangeValue*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprDomainOpenRangeValue->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprDomainOpenRangeValue)) __PYX_ERR(5, 402, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprHierarchicalId = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprHierarchicalId", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprHierarchicalId), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprHierarchicalId) __PYX_ERR(5, 409, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprHierarchicalId = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprHierarchicalId*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprHierarchicalId->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprHierarchicalId)) __PYX_ERR(5, 409, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprId = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprId", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprId), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprId) __PYX_ERR(5, 415, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprId = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprId*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprId->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprId)) __PYX_ERR(5, 415, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprIn = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprIn", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprIn), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprIn) __PYX_ERR(5, 423, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprIn = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprIn*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprIn->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprIn)) __PYX_ERR(5, 423, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprMemberPathElem = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprMemberPathElem", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprMemberPathElem), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprMemberPathElem) __PYX_ERR(5, 429, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprMemberPathElem = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprMemberPathElem*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprMemberPathElem->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprMemberPathElem)) __PYX_ERR(5, 429, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprNumber = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprNumber", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprNumber), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprNumber) __PYX_ERR(5, 436, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprNumber = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprNumber*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprNumber->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprNumber)) __PYX_ERR(5, 436, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprAggregateLiteral = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprAggregateLiteral", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprAggregateLiteral), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprAggregateLiteral) __PYX_ERR(5, 442, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprAggregateLiteral = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprAggregateLiteral*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprAggregateLiteral->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprAggregateLiteral)) __PYX_ERR(5, 442, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprOpenRangeList = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprOpenRangeList", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprOpenRangeList) __PYX_ERR(5, 448, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeList = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeList*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprOpenRangeList->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeList)) __PYX_ERR(5, 448, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprOpenRangeValue = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprOpenRangeValue", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprOpenRangeValue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprOpenRangeValue) __PYX_ERR(5, 454, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeValue = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprOpenRangeValue*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprOpenRangeValue->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprOpenRangeValue)) __PYX_ERR(5, 454, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPath = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPath", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPath), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPath) __PYX_ERR(5, 460, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPath = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPath*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPath->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPath)) __PYX_ERR(5, 460, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathElem = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathElem", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathElem), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathElem) __PYX_ERR(5, 466, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathElem = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathElem*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathElem->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathElem)) __PYX_ERR(5, 466, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathStaticRooted = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathStaticRooted", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticRooted), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticRooted) __PYX_ERR(5, 472, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticRooted = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticRooted*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticRooted->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticRooted)) __PYX_ERR(5, 472, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprStaticRefPath = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprStaticRefPath", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprStaticRefPath), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprStaticRefPath) __PYX_ERR(5, 478, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprStaticRefPath = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprStaticRefPath*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprStaticRefPath->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprStaticRefPath)) __PYX_ERR(5, 478, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprString = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprString", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprString), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprString) __PYX_ERR(5, 485, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprString = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprString*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprString->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprString)) __PYX_ERR(5, 485, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprSubscript = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprSubscript", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprSubscript), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprSubscript) __PYX_ERR(5, 493, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprSubscript = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprSubscript*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprSubscript->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprSubscript)) __PYX_ERR(5, 493, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprUnary = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprUnary", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprUnary), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprUnary) __PYX_ERR(5, 499, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprUnary = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnary*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprUnary->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprUnary)) __PYX_ERR(5, 499, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_MethodParameterList = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "MethodParameterList", sizeof(struct __pyx_obj_9pssparser_6pssast_MethodParameterList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_MethodParameterList) __PYX_ERR(5, 505, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_MethodParameterList = (struct __pyx_vtabstruct_9pssparser_6pssast_MethodParameterList*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_MethodParameterList->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_MethodParameterList)) __PYX_ERR(5, 505, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TypeIdentifier = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TypeIdentifier", sizeof(struct __pyx_obj_9pssparser_6pssast_TypeIdentifier), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TypeIdentifier) __PYX_ERR(5, 511, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TypeIdentifier = (struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifier*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TypeIdentifier->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TypeIdentifier)) __PYX_ERR(5, 511, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TypeIdentifierElem = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TypeIdentifierElem", sizeof(struct __pyx_obj_9pssparser_6pssast_TypeIdentifierElem), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TypeIdentifierElem) __PYX_ERR(5, 517, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TypeIdentifierElem = (struct __pyx_vtabstruct_9pssparser_6pssast_TypeIdentifierElem*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TypeIdentifierElem->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TypeIdentifierElem)) __PYX_ERR(5, 517, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_RefExprTypeScopeGlobal = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "RefExprTypeScopeGlobal", sizeof(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeGlobal), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeGlobal) __PYX_ERR(5, 523, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeGlobal = (struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeGlobal*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeGlobal->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeGlobal)) __PYX_ERR(5, 523, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_RefExprTypeScopeContext = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "RefExprTypeScopeContext", sizeof(struct __pyx_obj_9pssparser_6pssast_RefExprTypeScopeContext), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeContext) __PYX_ERR(5, 530, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeContext = (struct __pyx_vtabstruct_9pssparser_6pssast_RefExprTypeScopeContext*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_RefExprTypeScopeContext->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_RefExprTypeScopeContext)) __PYX_ERR(5, 530, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_RefExprScopeIndex = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "RefExprScopeIndex", sizeof(struct __pyx_obj_9pssparser_6pssast_RefExprScopeIndex), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_RefExprScopeIndex) __PYX_ERR(5, 537, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_RefExprScopeIndex = (struct __pyx_vtabstruct_9pssparser_6pssast_RefExprScopeIndex*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_RefExprScopeIndex->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_RefExprScopeIndex)) __PYX_ERR(5, 537, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateGenericTypeParamDecl = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateGenericTypeParamDecl", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateGenericTypeParamDecl), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateGenericTypeParamDecl) __PYX_ERR(5, 544, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateGenericTypeParamDecl = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateGenericTypeParamDecl*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateGenericTypeParamDecl->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateGenericTypeParamDecl)) __PYX_ERR(5, 544, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateCategoryTypeParamDecl = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateCategoryTypeParamDecl", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateCategoryTypeParamDecl), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateCategoryTypeParamDecl) __PYX_ERR(5, 550, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateCategoryTypeParamDecl = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateCategoryTypeParamDecl*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateCategoryTypeParamDecl->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateCategoryTypeParamDecl)) __PYX_ERR(5, 550, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TemplateValueParamDecl = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TemplateValueParamDecl", sizeof(struct __pyx_obj_9pssparser_6pssast_TemplateValueParamDecl), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TemplateValueParamDecl) __PYX_ERR(5, 556, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TemplateValueParamDecl = (struct __pyx_vtabstruct_9pssparser_6pssast_TemplateValueParamDecl*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TemplateValueParamDecl->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TemplateValueParamDecl)) __PYX_ERR(5, 556, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintBlock = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintBlock", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintBlock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintBlock) __PYX_ERR(5, 562, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintBlock = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintBlock*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintBlock->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintBlock)) __PYX_ERR(5, 562, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintScope", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintScope) __PYX_ERR(5, 570, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintScope = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintScope)) __PYX_ERR(5, 570, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtDefault = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtDefault", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefault), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefault) __PYX_ERR(5, 576, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefault = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefault*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefault->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefault)) __PYX_ERR(5, 576, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtDefaultDisable = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtDefaultDisable", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtDefaultDisable), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefaultDisable) __PYX_ERR(5, 582, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefaultDisable = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtDefaultDisable*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtDefaultDisable->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtDefaultDisable)) __PYX_ERR(5, 582, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtExpr = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtExpr", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtExpr), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtExpr) __PYX_ERR(5, 588, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtExpr = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtExpr*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtExpr->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtExpr)) __PYX_ERR(5, 588, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtField = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtField", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtField), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtField) __PYX_ERR(5, 594, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtField = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtField*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtField->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtField)) __PYX_ERR(5, 594, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtIf = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtIf", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtIf), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtIf) __PYX_ERR(5, 600, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtIf = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtIf*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtIf->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtIf)) __PYX_ERR(5, 600, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtUnique = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtUnique", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtUnique), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtUnique) __PYX_ERR(5, 606, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtUnique = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtUnique*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtUnique->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtUnique)) __PYX_ERR(5, 606, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_GlobalScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "GlobalScope", sizeof(struct __pyx_obj_9pssparser_6pssast_GlobalScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_GlobalScope) __PYX_ERR(5, 612, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_GlobalScope = (struct __pyx_vtabstruct_9pssparser_6pssast_GlobalScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_GlobalScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_GlobalScope)) __PYX_ERR(5, 612, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_NamedScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "NamedScope", sizeof(struct __pyx_obj_9pssparser_6pssast_NamedScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_NamedScope) __PYX_ERR(5, 619, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_NamedScope = (struct __pyx_vtabstruct_9pssparser_6pssast_NamedScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_NamedScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_NamedScope)) __PYX_ERR(5, 619, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_PackageScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "PackageScope", sizeof(struct __pyx_obj_9pssparser_6pssast_PackageScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_PackageScope) __PYX_ERR(5, 625, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_PackageScope = (struct __pyx_vtabstruct_9pssparser_6pssast_PackageScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_PackageScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_PackageScope)) __PYX_ERR(5, 625, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeArray = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeArray", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeArray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeArray) __PYX_ERR(5, 631, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeArray = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeArray*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeArray->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeArray)) __PYX_ERR(5, 631, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeBool = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeBool", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeBool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeBool) __PYX_ERR(5, 637, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeBool = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeBool*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeBool->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeBool)) __PYX_ERR(5, 637, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeChandle = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeChandle", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeChandle), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeChandle) __PYX_ERR(5, 643, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeChandle = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeChandle*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeChandle->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeChandle)) __PYX_ERR(5, 643, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeEnum = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeEnum", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeEnum), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeEnum) __PYX_ERR(5, 649, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeEnum = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeEnum*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeEnum->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeEnum)) __PYX_ERR(5, 649, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeInt = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeInt", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeInt), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeInt) __PYX_ERR(5, 655, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeInt = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeInt*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeInt->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeInt)) __PYX_ERR(5, 655, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeString = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeString", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeString), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeString) __PYX_ERR(5, 662, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeString = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeString*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeString->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeString)) __PYX_ERR(5, 662, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_DataTypeUserDefined = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "DataTypeUserDefined", sizeof(struct __pyx_obj_9pssparser_6pssast_DataTypeUserDefined), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_DataTypeUserDefined) __PYX_ERR(5, 669, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_DataTypeUserDefined = (struct __pyx_vtabstruct_9pssparser_6pssast_DataTypeUserDefined*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_DataTypeUserDefined->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_DataTypeUserDefined)) __PYX_ERR(5, 669, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathContext = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathContext", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathContext), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathContext) __PYX_ERR(5, 676, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathContext = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathContext*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathContext->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathContext)) __PYX_ERR(5, 676, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathStatic = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathStatic", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStatic), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathStatic) __PYX_ERR(5, 682, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathStatic = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStatic*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathStatic->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStatic)) __PYX_ERR(5, 682, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprSignedNumber = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprSignedNumber", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprSignedNumber), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprSignedNumber) __PYX_ERR(5, 689, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprSignedNumber = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprSignedNumber*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprSignedNumber->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprSignedNumber)) __PYX_ERR(5, 689, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprUnsignedNumber = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprUnsignedNumber", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprUnsignedNumber), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprUnsignedNumber) __PYX_ERR(5, 698, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprUnsignedNumber = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprUnsignedNumber*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprUnsignedNumber->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprUnsignedNumber)) __PYX_ERR(5, 698, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtForall = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtForall", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForall), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtForall) __PYX_ERR(5, 707, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForall = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForall*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtForall->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForall)) __PYX_ERR(5, 707, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtForeach = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtForeach", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtForeach), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtForeach) __PYX_ERR(5, 713, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForeach = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtForeach*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtForeach->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtForeach)) __PYX_ERR(5, 713, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ConstraintStmtImplication = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ConstraintStmtImplication", sizeof(struct __pyx_obj_9pssparser_6pssast_ConstraintStmtImplication), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ConstraintStmtImplication) __PYX_ERR(5, 719, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ConstraintStmtImplication = (struct __pyx_vtabstruct_9pssparser_6pssast_ConstraintStmtImplication*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ConstraintStmtImplication->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ConstraintStmtImplication)) __PYX_ERR(5, 719, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_TypeScope = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "TypeScope", sizeof(struct __pyx_obj_9pssparser_6pssast_TypeScope), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_TypeScope) __PYX_ERR(5, 725, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_TypeScope = (struct __pyx_vtabstruct_9pssparser_6pssast_TypeScope*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_TypeScope->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_TypeScope)) __PYX_ERR(5, 725, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathStaticFunc = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathStaticFunc", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathStaticFunc), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticFunc) __PYX_ERR(5, 731, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticFunc = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathStaticFunc*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathStaticFunc->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathStaticFunc)) __PYX_ERR(5, 731, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_ExprRefPathSuper = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "ExprRefPathSuper", sizeof(struct __pyx_obj_9pssparser_6pssast_ExprRefPathSuper), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_ExprRefPathSuper) __PYX_ERR(5, 737, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_ExprRefPathSuper = (struct __pyx_vtabstruct_9pssparser_6pssast_ExprRefPathSuper*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_ExprRefPathSuper->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_ExprRefPathSuper)) __PYX_ERR(5, 737, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Action = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Action", sizeof(struct __pyx_obj_9pssparser_6pssast_Action), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Action) __PYX_ERR(5, 743, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Action = (struct __pyx_vtabstruct_9pssparser_6pssast_Action*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Action->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Action)) __PYX_ERR(5, 743, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Component = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Component", sizeof(struct __pyx_obj_9pssparser_6pssast_Component), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Component) __PYX_ERR(5, 750, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Component = (struct __pyx_vtabstruct_9pssparser_6pssast_Component*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Component->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Component)) __PYX_ERR(5, 750, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Struct = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Struct", sizeof(struct __pyx_obj_9pssparser_6pssast_Struct), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Struct) __PYX_ERR(5, 756, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Struct = (struct __pyx_vtabstruct_9pssparser_6pssast_Struct*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Struct->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Struct)) __PYX_ERR(5, 756, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_State = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "State", sizeof(struct __pyx_obj_9pssparser_6pssast_State), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_State) __PYX_ERR(5, 762, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_State = (struct __pyx_vtabstruct_9pssparser_6pssast_State*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_State->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_State)) __PYX_ERR(5, 762, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Stream = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Stream", sizeof(struct __pyx_obj_9pssparser_6pssast_Stream), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Stream) __PYX_ERR(5, 768, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Stream = (struct __pyx_vtabstruct_9pssparser_6pssast_Stream*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Stream->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Stream)) __PYX_ERR(5, 768, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Buffer = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Buffer", sizeof(struct __pyx_obj_9pssparser_6pssast_Buffer), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Buffer) __PYX_ERR(5, 774, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Buffer = (struct __pyx_vtabstruct_9pssparser_6pssast_Buffer*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Buffer->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Buffer)) __PYX_ERR(5, 774, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_Resource = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "Resource", sizeof(struct __pyx_obj_9pssparser_6pssast_Resource), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_Resource) __PYX_ERR(5, 780, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_Resource = (struct __pyx_vtabstruct_9pssparser_6pssast_Resource*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_Resource->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_Resource)) __PYX_ERR(5, 780, __pyx_L1_error)
  __pyx_ptype_9pssparser_6pssast_VisitorBase = __Pyx_ImportType(__pyx_t_1, "pssparser.pssast", "VisitorBase", sizeof(struct __pyx_obj_9pssparser_6pssast_VisitorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_9pssparser_6pssast_VisitorBase) __PYX_ERR(5, 786, __pyx_L1_error)
  __pyx_vtabptr_9pssparser_6pssast_VisitorBase = (struct __pyx_vtabstruct_9pssparser_6pssast_VisitorBase*)__Pyx_GetVtable(__pyx_ptype_9pssparser_6pssast_VisitorBase->tp_dict); if (unlikely(!__pyx_vtabptr_9pssparser_6pssast_VisitorBase)) __PYX_ERR(5, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcore(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcore(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pssparser__core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pssparser.core")) {
      if (unlikely(PyDict_SetItemString(modules, "pssparser.core", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  if (unlikely(__Pyx_modinit_variable_export_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "python/core.pyx":23
 * 
 *     @staticmethod
 *     def inst():             # <<<<<<<<<<<<<<
 *         global _factoryInst
 *         if _factoryInst is None:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9pssparser_4core_7Factory_5inst, NULL, __pyx_n_s_pssparser_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9pssparser_4core_Factory->tp_dict, __pyx_n_s_inst, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9pssparser_4core_Factory);

  /* "python/core.pyx":22
 *         pass
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inst():
 *         global _factoryInst
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_9pssparser_4core_Factory, __pyx_n_s_inst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9pssparser_4core_Factory->tp_dict, __pyx_n_s_inst, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9pssparser_4core_Factory);

  /* "python/core.pyx":2
 * 
 * cimport pssparser.pssast as ast             # <<<<<<<<<<<<<<
 * cimport ciostream
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pssparser.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pssparser.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* VoidPtrExport */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
